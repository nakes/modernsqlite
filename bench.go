// Code generated by 'ccgo -o bench.go bench.c -lmodernc.org/sqlite/lib -pkgname sqlite -export-typedefs=x -export-structs=x -export-enums=x -export-defines=x -export-externs=x -export-fields=x', DO NOT EDIT.

package sqlite

import (
	"math"
	"reflect"
	"unsafe"

	"modernc.org/libc"
	"modernc.org/sqlite/lib"
)

var _ = math.Pi
var _ reflect.Kind
var _ unsafe.Pointer

const (
	xBIG_ENDIAN                            = 4321
	xBUFSIZ                                = 8192
	xBYTE_ORDER                            = 1234
	xEOF                                   = -1
	xEXIT_FAILURE                          = 1
	xEXIT_SUCCESS                          = 0
	xFD_SETSIZE                            = 1024
	xFILENAME_MAX                          = 4096
	xFOPEN_MAX                             = 16
	xFTS5_TOKENIZE_AUX                     = 0x0008
	xFTS5_TOKENIZE_DOCUMENT                = 0x0004
	xFTS5_TOKENIZE_PREFIX                  = 0x0002
	xFTS5_TOKENIZE_QUERY                   = 0x0001
	xFTS5_TOKEN_COLOCATED                  = 0x0001
	xFULLY_WITHIN                          = 2
	xLITTLE_ENDIAN                         = 1234
	xL_ctermid                             = 9
	xL_tmpnam                              = 20
	xNOT_WITHIN                            = 0
	xPARTLY_WITHIN                         = 1
	xPDP_ENDIAN                            = 3412
	xP_tmpdir                              = "/tmp"
	xRAND_MAX                              = 2147483647
	xSEEK_CUR                              = 1
	xSEEK_END                              = 2
	xSEEK_SET                              = 0
	xSQLITE3_H                             = 0
	xSQLITE3_TEXT                          = 3
	xSQLITE_ABORT                          = 4
	xSQLITE_ABORT_ROLLBACK                 = 516
	xSQLITE_ACCESS_EXISTS                  = 0
	xSQLITE_ACCESS_READ                    = 2
	xSQLITE_ACCESS_READWRITE               = 1
	xSQLITE_ALTER_TABLE                    = 26
	xSQLITE_ANALYZE                        = 28
	xSQLITE_ANY                            = 5
	xSQLITE_API                            = 0
	xSQLITE_APICALL                        = 0
	xSQLITE_ATTACH                         = 24
	xSQLITE_AUTH                           = 23
	xSQLITE_AUTH_USER                      = 279
	xSQLITE_BLOB                           = 4
	xSQLITE_BUSY                           = 5
	xSQLITE_BUSY_RECOVERY                  = 261
	xSQLITE_BUSY_SNAPSHOT                  = 517
	xSQLITE_BUSY_TIMEOUT                   = 773
	xSQLITE_CALLBACK                       = 0
	xSQLITE_CANTOPEN                       = 14
	xSQLITE_CANTOPEN_CONVPATH              = 1038
	xSQLITE_CANTOPEN_DIRTYWAL              = 1294
	xSQLITE_CANTOPEN_FULLPATH              = 782
	xSQLITE_CANTOPEN_ISDIR                 = 526
	xSQLITE_CANTOPEN_NOTEMPDIR             = 270
	xSQLITE_CANTOPEN_SYMLINK               = 1550
	xSQLITE_CDECL                          = 0
	xSQLITE_CHECKPOINT_FULL                = 1
	xSQLITE_CHECKPOINT_PASSIVE             = 0
	xSQLITE_CHECKPOINT_RESTART             = 2
	xSQLITE_CHECKPOINT_TRUNCATE            = 3
	xSQLITE_CONFIG_COVERING_INDEX_SCAN     = 20
	xSQLITE_CONFIG_GETMALLOC               = 5
	xSQLITE_CONFIG_GETMUTEX                = 11
	xSQLITE_CONFIG_GETPCACHE               = 15
	xSQLITE_CONFIG_GETPCACHE2              = 19
	xSQLITE_CONFIG_HEAP                    = 8
	xSQLITE_CONFIG_LOG                     = 16
	xSQLITE_CONFIG_LOOKASIDE               = 13
	xSQLITE_CONFIG_MALLOC                  = 4
	xSQLITE_CONFIG_MEMDB_MAXSIZE           = 29
	xSQLITE_CONFIG_MEMSTATUS               = 9
	xSQLITE_CONFIG_MMAP_SIZE               = 22
	xSQLITE_CONFIG_MULTITHREAD             = 2
	xSQLITE_CONFIG_MUTEX                   = 10
	xSQLITE_CONFIG_PAGECACHE               = 7
	xSQLITE_CONFIG_PCACHE                  = 14
	xSQLITE_CONFIG_PCACHE2                 = 18
	xSQLITE_CONFIG_PCACHE_HDRSZ            = 24
	xSQLITE_CONFIG_PMASZ                   = 25
	xSQLITE_CONFIG_SCRATCH                 = 6
	xSQLITE_CONFIG_SERIALIZED              = 3
	xSQLITE_CONFIG_SINGLETHREAD            = 1
	xSQLITE_CONFIG_SMALL_MALLOC            = 27
	xSQLITE_CONFIG_SORTERREF_SIZE          = 28
	xSQLITE_CONFIG_SQLLOG                  = 21
	xSQLITE_CONFIG_STMTJRNL_SPILL          = 26
	xSQLITE_CONFIG_URI                     = 17
	xSQLITE_CONFIG_WIN32_HEAPSIZE          = 23
	xSQLITE_CONSTRAINT                     = 19
	xSQLITE_CONSTRAINT_CHECK               = 275
	xSQLITE_CONSTRAINT_COMMITHOOK          = 531
	xSQLITE_CONSTRAINT_FOREIGNKEY          = 787
	xSQLITE_CONSTRAINT_FUNCTION            = 1043
	xSQLITE_CONSTRAINT_NOTNULL             = 1299
	xSQLITE_CONSTRAINT_PINNED              = 2835
	xSQLITE_CONSTRAINT_PRIMARYKEY          = 1555
	xSQLITE_CONSTRAINT_ROWID               = 2579
	xSQLITE_CONSTRAINT_TRIGGER             = 1811
	xSQLITE_CONSTRAINT_UNIQUE              = 2067
	xSQLITE_CONSTRAINT_VTAB                = 2323
	xSQLITE_COPY                           = 0
	xSQLITE_CORRUPT                        = 11
	xSQLITE_CORRUPT_INDEX                  = 779
	xSQLITE_CORRUPT_SEQUENCE               = 523
	xSQLITE_CORRUPT_VTAB                   = 267
	xSQLITE_CREATE_INDEX                   = 1
	xSQLITE_CREATE_TABLE                   = 2
	xSQLITE_CREATE_TEMP_INDEX              = 3
	xSQLITE_CREATE_TEMP_TABLE              = 4
	xSQLITE_CREATE_TEMP_TRIGGER            = 5
	xSQLITE_CREATE_TEMP_VIEW               = 6
	xSQLITE_CREATE_TRIGGER                 = 7
	xSQLITE_CREATE_VIEW                    = 8
	xSQLITE_CREATE_VTABLE                  = 29
	xSQLITE_DBCONFIG_DEFENSIVE             = 1010
	xSQLITE_DBCONFIG_DQS_DDL               = 1014
	xSQLITE_DBCONFIG_DQS_DML               = 1013
	xSQLITE_DBCONFIG_ENABLE_FKEY           = 1002
	xSQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER = 1004
	xSQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION = 1005
	xSQLITE_DBCONFIG_ENABLE_QPSG           = 1007
	xSQLITE_DBCONFIG_ENABLE_TRIGGER        = 1003
	xSQLITE_DBCONFIG_ENABLE_VIEW           = 1015
	xSQLITE_DBCONFIG_LEGACY_ALTER_TABLE    = 1012
	xSQLITE_DBCONFIG_LEGACY_FILE_FORMAT    = 1016
	xSQLITE_DBCONFIG_LOOKASIDE             = 1001
	xSQLITE_DBCONFIG_MAINDBNAME            = 1000
	xSQLITE_DBCONFIG_MAX                   = 1017
	xSQLITE_DBCONFIG_NO_CKPT_ON_CLOSE      = 1006
	xSQLITE_DBCONFIG_RESET_DATABASE        = 1009
	xSQLITE_DBCONFIG_TRIGGER_EQP           = 1008
	xSQLITE_DBCONFIG_TRUSTED_SCHEMA        = 1017
	xSQLITE_DBCONFIG_WRITABLE_SCHEMA       = 1011
	xSQLITE_DBSTATUS_CACHE_HIT             = 7
	xSQLITE_DBSTATUS_CACHE_MISS            = 8
	xSQLITE_DBSTATUS_CACHE_SPILL           = 12
	xSQLITE_DBSTATUS_CACHE_USED            = 1
	xSQLITE_DBSTATUS_CACHE_USED_SHARED     = 11
	xSQLITE_DBSTATUS_CACHE_WRITE           = 9
	xSQLITE_DBSTATUS_DEFERRED_FKS          = 10
	xSQLITE_DBSTATUS_LOOKASIDE_HIT         = 4
	xSQLITE_DBSTATUS_LOOKASIDE_MISS_FULL   = 6
	xSQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE   = 5
	xSQLITE_DBSTATUS_LOOKASIDE_USED        = 0
	xSQLITE_DBSTATUS_MAX                   = 12
	xSQLITE_DBSTATUS_SCHEMA_USED           = 2
	xSQLITE_DBSTATUS_STMT_USED             = 3
	xSQLITE_DELETE                         = 9
	xSQLITE_DENY                           = 1
	xSQLITE_DEPRECATED                     = 0
	xSQLITE_DESERIALIZE_FREEONCLOSE        = 1
	xSQLITE_DESERIALIZE_READONLY           = 4
	xSQLITE_DESERIALIZE_RESIZEABLE         = 2
	xSQLITE_DETACH                         = 25
	xSQLITE_DETERMINISTIC                  = 0x000000800
	xSQLITE_DIRECTONLY                     = 0x000080000
	xSQLITE_DONE                           = 101
	xSQLITE_DROP_INDEX                     = 10
	xSQLITE_DROP_TABLE                     = 11
	xSQLITE_DROP_TEMP_INDEX                = 12
	xSQLITE_DROP_TEMP_TABLE                = 13
	xSQLITE_DROP_TEMP_TRIGGER              = 14
	xSQLITE_DROP_TEMP_VIEW                 = 15
	xSQLITE_DROP_TRIGGER                   = 16
	xSQLITE_DROP_VIEW                      = 17
	xSQLITE_DROP_VTABLE                    = 30
	xSQLITE_EMPTY                          = 16
	xSQLITE_ERROR                          = 1
	xSQLITE_ERROR_MISSING_COLLSEQ          = 257
	xSQLITE_ERROR_RETRY                    = 513
	xSQLITE_ERROR_SNAPSHOT                 = 769
	xSQLITE_EXPERIMENTAL                   = 0
	xSQLITE_FAIL                           = 3
	xSQLITE_FCNTL_BEGIN_ATOMIC_WRITE       = 31
	xSQLITE_FCNTL_BUSYHANDLER              = 15
	xSQLITE_FCNTL_CHUNK_SIZE               = 6
	xSQLITE_FCNTL_CKPT_DONE                = 37
	xSQLITE_FCNTL_CKPT_START               = 39
	xSQLITE_FCNTL_COMMIT_ATOMIC_WRITE      = 32
	xSQLITE_FCNTL_COMMIT_PHASETWO          = 22
	xSQLITE_FCNTL_DATA_VERSION             = 35
	xSQLITE_FCNTL_FILE_POINTER             = 7
	xSQLITE_FCNTL_GET_LOCKPROXYFILE        = 2
	xSQLITE_FCNTL_HAS_MOVED                = 20
	xSQLITE_FCNTL_JOURNAL_POINTER          = 28
	xSQLITE_FCNTL_LAST_ERRNO               = 4
	xSQLITE_FCNTL_LOCKSTATE                = 1
	xSQLITE_FCNTL_LOCK_TIMEOUT             = 34
	xSQLITE_FCNTL_MMAP_SIZE                = 18
	xSQLITE_FCNTL_OVERWRITE                = 11
	xSQLITE_FCNTL_PDB                      = 30
	xSQLITE_FCNTL_PERSIST_WAL              = 10
	xSQLITE_FCNTL_POWERSAFE_OVERWRITE      = 13
	xSQLITE_FCNTL_PRAGMA                   = 14
	xSQLITE_FCNTL_RBU                      = 26
	xSQLITE_FCNTL_RESERVE_BYTES            = 38
	xSQLITE_FCNTL_ROLLBACK_ATOMIC_WRITE    = 33
	xSQLITE_FCNTL_SET_LOCKPROXYFILE        = 3
	xSQLITE_FCNTL_SIZE_HINT                = 5
	xSQLITE_FCNTL_SIZE_LIMIT               = 36
	xSQLITE_FCNTL_SYNC                     = 21
	xSQLITE_FCNTL_SYNC_OMITTED             = 8
	xSQLITE_FCNTL_TEMPFILENAME             = 16
	xSQLITE_FCNTL_TRACE                    = 19
	xSQLITE_FCNTL_VFSNAME                  = 12
	xSQLITE_FCNTL_VFS_POINTER              = 27
	xSQLITE_FCNTL_WAL_BLOCK                = 24
	xSQLITE_FCNTL_WIN32_AV_RETRY           = 9
	xSQLITE_FCNTL_WIN32_GET_HANDLE         = 29
	xSQLITE_FCNTL_WIN32_SET_HANDLE         = 23
	xSQLITE_FCNTL_ZIPVFS                   = 25
	xSQLITE_FLOAT                          = 2
	xSQLITE_FORMAT                         = 24
	xSQLITE_FULL                           = 13
	xSQLITE_FUNCTION                       = 31
	xSQLITE_GET_LOCKPROXYFILE              = 2
	xSQLITE_IGNORE                         = 2
	xSQLITE_INDEX_CONSTRAINT_EQ            = 2
	xSQLITE_INDEX_CONSTRAINT_FUNCTION      = 150
	xSQLITE_INDEX_CONSTRAINT_GE            = 32
	xSQLITE_INDEX_CONSTRAINT_GLOB          = 66
	xSQLITE_INDEX_CONSTRAINT_GT            = 4
	xSQLITE_INDEX_CONSTRAINT_IS            = 72
	xSQLITE_INDEX_CONSTRAINT_ISNOT         = 69
	xSQLITE_INDEX_CONSTRAINT_ISNOTNULL     = 70
	xSQLITE_INDEX_CONSTRAINT_ISNULL        = 71
	xSQLITE_INDEX_CONSTRAINT_LE            = 8
	xSQLITE_INDEX_CONSTRAINT_LIKE          = 65
	xSQLITE_INDEX_CONSTRAINT_LT            = 16
	xSQLITE_INDEX_CONSTRAINT_MATCH         = 64
	xSQLITE_INDEX_CONSTRAINT_NE            = 68
	xSQLITE_INDEX_CONSTRAINT_REGEXP        = 67
	xSQLITE_INDEX_SCAN_UNIQUE              = 1
	xSQLITE_INNOCUOUS                      = 0x000200000
	xSQLITE_INSERT                         = 18
	xSQLITE_INTEGER                        = 1
	xSQLITE_INTERNAL                       = 2
	xSQLITE_INTERRUPT                      = 9
	xSQLITE_IOCAP_ATOMIC                   = 0x00000001
	xSQLITE_IOCAP_ATOMIC16K                = 0x00000040
	xSQLITE_IOCAP_ATOMIC1K                 = 0x00000004
	xSQLITE_IOCAP_ATOMIC2K                 = 0x00000008
	xSQLITE_IOCAP_ATOMIC32K                = 0x00000080
	xSQLITE_IOCAP_ATOMIC4K                 = 0x00000010
	xSQLITE_IOCAP_ATOMIC512                = 0x00000002
	xSQLITE_IOCAP_ATOMIC64K                = 0x00000100
	xSQLITE_IOCAP_ATOMIC8K                 = 0x00000020
	xSQLITE_IOCAP_BATCH_ATOMIC             = 0x00004000
	xSQLITE_IOCAP_IMMUTABLE                = 0x00002000
	xSQLITE_IOCAP_POWERSAFE_OVERWRITE      = 0x00001000
	xSQLITE_IOCAP_SAFE_APPEND              = 0x00000200
	xSQLITE_IOCAP_SEQUENTIAL               = 0x00000400
	xSQLITE_IOCAP_UNDELETABLE_WHEN_OPEN    = 0x00000800
	xSQLITE_IOERR                          = 10
	xSQLITE_IOERR_ACCESS                   = 3338
	xSQLITE_IOERR_AUTH                     = 7178
	xSQLITE_IOERR_BEGIN_ATOMIC             = 7434
	xSQLITE_IOERR_BLOCKED                  = 2826
	xSQLITE_IOERR_CHECKRESERVEDLOCK        = 3594
	xSQLITE_IOERR_CLOSE                    = 4106
	xSQLITE_IOERR_COMMIT_ATOMIC            = 7690
	xSQLITE_IOERR_CONVPATH                 = 6666
	xSQLITE_IOERR_CORRUPTFS                = 8458
	xSQLITE_IOERR_DATA                     = 8202
	xSQLITE_IOERR_DELETE                   = 2570
	xSQLITE_IOERR_DELETE_NOENT             = 5898
	xSQLITE_IOERR_DIR_CLOSE                = 4362
	xSQLITE_IOERR_DIR_FSYNC                = 1290
	xSQLITE_IOERR_FSTAT                    = 1802
	xSQLITE_IOERR_FSYNC                    = 1034
	xSQLITE_IOERR_GETTEMPPATH              = 6410
	xSQLITE_IOERR_LOCK                     = 3850
	xSQLITE_IOERR_MMAP                     = 6154
	xSQLITE_IOERR_NOMEM                    = 3082
	xSQLITE_IOERR_RDLOCK                   = 2314
	xSQLITE_IOERR_READ                     = 266
	xSQLITE_IOERR_ROLLBACK_ATOMIC          = 7946
	xSQLITE_IOERR_SEEK                     = 5642
	xSQLITE_IOERR_SHMLOCK                  = 5130
	xSQLITE_IOERR_SHMMAP                   = 5386
	xSQLITE_IOERR_SHMOPEN                  = 4618
	xSQLITE_IOERR_SHMSIZE                  = 4874
	xSQLITE_IOERR_SHORT_READ               = 522
	xSQLITE_IOERR_TRUNCATE                 = 1546
	xSQLITE_IOERR_UNLOCK                   = 2058
	xSQLITE_IOERR_VNODE                    = 6922
	xSQLITE_IOERR_WRITE                    = 778
	xSQLITE_LAST_ERRNO                     = 4
	xSQLITE_LIMIT_ATTACHED                 = 7
	xSQLITE_LIMIT_COLUMN                   = 2
	xSQLITE_LIMIT_COMPOUND_SELECT          = 4
	xSQLITE_LIMIT_EXPR_DEPTH               = 3
	xSQLITE_LIMIT_FUNCTION_ARG             = 6
	xSQLITE_LIMIT_LENGTH                   = 0
	xSQLITE_LIMIT_LIKE_PATTERN_LENGTH      = 8
	xSQLITE_LIMIT_SQL_LENGTH               = 1
	xSQLITE_LIMIT_TRIGGER_DEPTH            = 10
	xSQLITE_LIMIT_VARIABLE_NUMBER          = 9
	xSQLITE_LIMIT_VDBE_OP                  = 5
	xSQLITE_LIMIT_WORKER_THREADS           = 11
	xSQLITE_LOCKED                         = 6
	xSQLITE_LOCKED_SHAREDCACHE             = 262
	xSQLITE_LOCKED_VTAB                    = 518
	xSQLITE_LOCK_EXCLUSIVE                 = 4
	xSQLITE_LOCK_NONE                      = 0
	xSQLITE_LOCK_PENDING                   = 3
	xSQLITE_LOCK_RESERVED                  = 2
	xSQLITE_LOCK_SHARED                    = 1
	xSQLITE_MISMATCH                       = 20
	xSQLITE_MISUSE                         = 21
	xSQLITE_MUTEX_FAST                     = 0
	xSQLITE_MUTEX_RECURSIVE                = 1
	xSQLITE_MUTEX_STATIC_APP1              = 8
	xSQLITE_MUTEX_STATIC_APP2              = 9
	xSQLITE_MUTEX_STATIC_APP3              = 10
	xSQLITE_MUTEX_STATIC_LRU               = 6
	xSQLITE_MUTEX_STATIC_LRU2              = 7
	xSQLITE_MUTEX_STATIC_MAIN              = 2
	xSQLITE_MUTEX_STATIC_MASTER            = 2
	xSQLITE_MUTEX_STATIC_MEM               = 3
	xSQLITE_MUTEX_STATIC_MEM2              = 4
	xSQLITE_MUTEX_STATIC_OPEN              = 4
	xSQLITE_MUTEX_STATIC_PMEM              = 7
	xSQLITE_MUTEX_STATIC_PRNG              = 5
	xSQLITE_MUTEX_STATIC_VFS1              = 11
	xSQLITE_MUTEX_STATIC_VFS2              = 12
	xSQLITE_MUTEX_STATIC_VFS3              = 13
	xSQLITE_NOLFS                          = 22
	xSQLITE_NOMEM                          = 7
	xSQLITE_NOTADB                         = 26
	xSQLITE_NOTFOUND                       = 12
	xSQLITE_NOTICE                         = 27
	xSQLITE_NOTICE_RECOVER_ROLLBACK        = 539
	xSQLITE_NOTICE_RECOVER_WAL             = 283
	xSQLITE_NULL                           = 5
	xSQLITE_OK                             = 0
	xSQLITE_OK_LOAD_PERMANENTLY            = 256
	xSQLITE_OK_SYMLINK                     = 512
	xSQLITE_OPEN_AUTOPROXY                 = 0x00000020
	xSQLITE_OPEN_CREATE                    = 0x00000004
	xSQLITE_OPEN_DELETEONCLOSE             = 0x00000008
	xSQLITE_OPEN_EXCLUSIVE                 = 0x00000010
	xSQLITE_OPEN_FULLMUTEX                 = 0x00010000
	xSQLITE_OPEN_MAIN_DB                   = 0x00000100
	xSQLITE_OPEN_MAIN_JOURNAL              = 0x00000800
	xSQLITE_OPEN_MASTER_JOURNAL            = 0x00004000
	xSQLITE_OPEN_MEMORY                    = 0x00000080
	xSQLITE_OPEN_NOFOLLOW                  = 0x01000000
	xSQLITE_OPEN_NOMUTEX                   = 0x00008000
	xSQLITE_OPEN_PRIVATECACHE              = 0x00040000
	xSQLITE_OPEN_READONLY                  = 0x00000001
	xSQLITE_OPEN_READWRITE                 = 0x00000002
	xSQLITE_OPEN_SHAREDCACHE               = 0x00020000
	xSQLITE_OPEN_SUBJOURNAL                = 0x00002000
	xSQLITE_OPEN_SUPER_JOURNAL             = 0x00004000
	xSQLITE_OPEN_TEMP_DB                   = 0x00000200
	xSQLITE_OPEN_TEMP_JOURNAL              = 0x00001000
	xSQLITE_OPEN_TRANSIENT_DB              = 0x00000400
	xSQLITE_OPEN_URI                       = 0x00000040
	xSQLITE_OPEN_WAL                       = 0x00080000
	xSQLITE_PERM                           = 3
	xSQLITE_PRAGMA                         = 19
	xSQLITE_PREPARE_NORMALIZE              = 0x02
	xSQLITE_PREPARE_NO_VTAB                = 0x04
	xSQLITE_PREPARE_PERSISTENT             = 0x01
	xSQLITE_PROTOCOL                       = 15
	xSQLITE_RANGE                          = 25
	xSQLITE_READ                           = 20
	xSQLITE_READONLY                       = 8
	xSQLITE_READONLY_CANTINIT              = 1288
	xSQLITE_READONLY_CANTLOCK              = 520
	xSQLITE_READONLY_DBMOVED               = 1032
	xSQLITE_READONLY_DIRECTORY             = 1544
	xSQLITE_READONLY_RECOVERY              = 264
	xSQLITE_READONLY_ROLLBACK              = 776
	xSQLITE_RECURSIVE                      = 33
	xSQLITE_REINDEX                        = 27
	xSQLITE_REPLACE                        = 5
	xSQLITE_ROLLBACK                       = 1
	xSQLITE_ROW                            = 100
	xSQLITE_SAVEPOINT                      = 32
	xSQLITE_SCANSTAT_EST                   = 2
	xSQLITE_SCANSTAT_EXPLAIN               = 4
	xSQLITE_SCANSTAT_NAME                  = 3
	xSQLITE_SCANSTAT_NLOOP                 = 0
	xSQLITE_SCANSTAT_NVISIT                = 1
	xSQLITE_SCANSTAT_SELECTID              = 5
	xSQLITE_SCHEMA                         = 17
	xSQLITE_SELECT                         = 21
	xSQLITE_SERIALIZE_NOCOPY               = 0x001
	xSQLITE_SET_LOCKPROXYFILE              = 3
	xSQLITE_SHM_EXCLUSIVE                  = 8
	xSQLITE_SHM_LOCK                       = 2
	xSQLITE_SHM_NLOCK                      = 8
	xSQLITE_SHM_SHARED                     = 4
	xSQLITE_SHM_UNLOCK                     = 1
	xSQLITE_SOURCE_ID                      = "2020-12-01 16:14:00 a26b6597e3ae272231b96f9982c3bcc17ddec2f2b6eb4df06a224b91089fed5b"
	xSQLITE_STATUS_MALLOC_COUNT            = 9
	xSQLITE_STATUS_MALLOC_SIZE             = 5
	xSQLITE_STATUS_MEMORY_USED             = 0
	xSQLITE_STATUS_PAGECACHE_OVERFLOW      = 2
	xSQLITE_STATUS_PAGECACHE_SIZE          = 7
	xSQLITE_STATUS_PAGECACHE_USED          = 1
	xSQLITE_STATUS_PARSER_STACK            = 6
	xSQLITE_STATUS_SCRATCH_OVERFLOW        = 4
	xSQLITE_STATUS_SCRATCH_SIZE            = 8
	xSQLITE_STATUS_SCRATCH_USED            = 3
	xSQLITE_STDCALL                        = 0
	xSQLITE_STMTSTATUS_AUTOINDEX           = 3
	xSQLITE_STMTSTATUS_FULLSCAN_STEP       = 1
	xSQLITE_STMTSTATUS_MEMUSED             = 99
	xSQLITE_STMTSTATUS_REPREPARE           = 5
	xSQLITE_STMTSTATUS_RUN                 = 6
	xSQLITE_STMTSTATUS_SORT                = 2
	xSQLITE_STMTSTATUS_VM_STEP             = 4
	xSQLITE_SUBTYPE                        = 0x000100000
	xSQLITE_SYNC_DATAONLY                  = 0x00010
	xSQLITE_SYNC_FULL                      = 0x00003
	xSQLITE_SYNC_NORMAL                    = 0x00002
	xSQLITE_SYSAPI                         = 0
	xSQLITE_TESTCTRL_ALWAYS                = 13
	xSQLITE_TESTCTRL_ASSERT                = 12
	xSQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS   = 10
	xSQLITE_TESTCTRL_BITVEC_TEST           = 8
	xSQLITE_TESTCTRL_BYTEORDER             = 22
	xSQLITE_TESTCTRL_EXPLAIN_STMT          = 19
	xSQLITE_TESTCTRL_EXTRA_SCHEMA_CHECKS   = 29
	xSQLITE_TESTCTRL_FAULT_INSTALL         = 9
	xSQLITE_TESTCTRL_FIRST                 = 5
	xSQLITE_TESTCTRL_IMPOSTER              = 25
	xSQLITE_TESTCTRL_INTERNAL_FUNCTIONS    = 17
	xSQLITE_TESTCTRL_ISINIT                = 23
	xSQLITE_TESTCTRL_ISKEYWORD             = 16
	xSQLITE_TESTCTRL_LAST                  = 30
	xSQLITE_TESTCTRL_LOCALTIME_FAULT       = 18
	xSQLITE_TESTCTRL_NEVER_CORRUPT         = 20
	xSQLITE_TESTCTRL_ONCE_RESET_THRESHOLD  = 19
	xSQLITE_TESTCTRL_OPTIMIZATIONS         = 15
	xSQLITE_TESTCTRL_PARSER_COVERAGE       = 26
	xSQLITE_TESTCTRL_PENDING_BYTE          = 11
	xSQLITE_TESTCTRL_PRNG_RESET            = 7
	xSQLITE_TESTCTRL_PRNG_RESTORE          = 6
	xSQLITE_TESTCTRL_PRNG_SAVE             = 5
	xSQLITE_TESTCTRL_PRNG_SEED             = 28
	xSQLITE_TESTCTRL_RESERVE               = 14
	xSQLITE_TESTCTRL_RESULT_INTREAL        = 27
	xSQLITE_TESTCTRL_SCRATCHMALLOC         = 17
	xSQLITE_TESTCTRL_SEEK_COUNT            = 30
	xSQLITE_TESTCTRL_SORTER_MMAP           = 24
	xSQLITE_TESTCTRL_VDBE_COVERAGE         = 21
	xSQLITE_TEXT                           = 3
	xSQLITE_TOOBIG                         = 18
	xSQLITE_TRACE_CLOSE                    = 0x08
	xSQLITE_TRACE_PROFILE                  = 0x02
	xSQLITE_TRACE_ROW                      = 0x04
	xSQLITE_TRACE_STMT                     = 0x01
	xSQLITE_TRANSACTION                    = 22
	xSQLITE_TXN_NONE                       = 0
	xSQLITE_TXN_READ                       = 1
	xSQLITE_TXN_WRITE                      = 2
	xSQLITE_UPDATE                         = 23
	xSQLITE_UTF16                          = 4
	xSQLITE_UTF16BE                        = 3
	xSQLITE_UTF16LE                        = 2
	xSQLITE_UTF16_ALIGNED                  = 8
	xSQLITE_UTF8                           = 1
	xSQLITE_VERSION                        = "3.34.0"
	xSQLITE_VERSION_NUMBER                 = 3034000
	xSQLITE_VTAB_CONSTRAINT_SUPPORT        = 1
	xSQLITE_VTAB_DIRECTONLY                = 3
	xSQLITE_VTAB_INNOCUOUS                 = 2
	xSQLITE_WARNING                        = 28
	xSQLITE_WARNING_AUTOINDEX              = 284
	xSQLITE_WIN32_DATA_DIRECTORY_TYPE      = 1
	xSQLITE_WIN32_TEMP_DIRECTORY_TYPE      = 2
	xTMP_MAX                               = 238328
	xWCONTINUED                            = 8
	xWEXITED                               = 4
	xWNOHANG                               = 1
	xWNOWAIT                               = 0x01000000
	xWSTOPPED                              = 2
	xWUNTRACED                             = 2
	x_ALLOCA_H                             = 1
	x_ANSI_STDARG_H_                       = 0
	x_ATFILE_SOURCE                        = 1
	x_BITS_BYTESWAP_H                      = 1
	x_BITS_ENDIANNESS_H                    = 1
	x_BITS_ENDIAN_H                        = 1
	x_BITS_FLOATN_COMMON_H                 = 0
	x_BITS_FLOATN_H                        = 0
	x_BITS_PTHREADTYPES_ARCH_H             = 1
	x_BITS_PTHREADTYPES_COMMON_H           = 1
	x_BITS_STDINT_INTN_H                   = 1
	x_BITS_STDIO_LIM_H                     = 1
	x_BITS_TIME64_H                        = 1
	x_BITS_TYPESIZES_H                     = 1
	x_BITS_TYPES_H                         = 1
	x_BITS_TYPES_LOCALE_T_H                = 1
	x_BITS_TYPES___LOCALE_T_H              = 1
	x_BITS_UINTN_IDENTITY_H                = 1
	x_BSD_SIZE_T_                          = 0
	x_BSD_SIZE_T_DEFINED_                  = 0
	x_DEFAULT_SOURCE                       = 1
	x_ENDIAN_H                             = 1
	x_FEATURES_H                           = 1
	x_FILE_OFFSET_BITS                     = 64
	x_FTS5_H                               = 0
	x_GCC_SIZE_T                           = 0
	x_GCC_WCHAR_T                          = 0
	x_IOFBF                                = 0
	x_IOLBF                                = 1
	x_IONBF                                = 2
	x_IO_EOF_SEEN                          = 0x0010
	x_IO_ERR_SEEN                          = 0x0020
	x_IO_USER_LOCK                         = 0x8000
	x_LP64                                 = 1
	x_POSIX_C_SOURCE                       = 200809
	x_POSIX_SOURCE                         = 1
	x_RWLOCK_INTERNAL_H                    = 0
	x_SIZET_                               = 0
	x_SIZE_T                               = 0
	x_SIZE_T_                              = 0
	x_SIZE_T_DECLARED                      = 0
	x_SIZE_T_DEFINED                       = 0
	x_SIZE_T_DEFINED_                      = 0
	x_SQLITE3RTREE_H_                      = 0
	x_STDARG_H                             = 0
	x_STDC_PREDEF_H                        = 1
	x_STDIO_H                              = 1
	x_STDLIB_H                             = 1
	x_STRINGS_H                            = 1
	x_STRING_H                             = 1
	x_STRUCT_TIMESPEC                      = 1
	x_SYS_CDEFS_H                          = 1
	x_SYS_SELECT_H                         = 1
	x_SYS_SIZE_T_H                         = 0
	x_SYS_TYPES_H                          = 1
	x_THREAD_MUTEX_INTERNAL_H              = 1
	x_THREAD_SHARED_TYPES_H                = 1
	x_T_SIZE                               = 0
	x_T_SIZE_                              = 0
	x_T_WCHAR                              = 0
	x_T_WCHAR_                             = 0
	x_VA_LIST                              = 0
	x_VA_LIST_                             = 0
	x_VA_LIST_DEFINED                      = 0
	x_VA_LIST_T_H                          = 0
	x_WCHAR_T                              = 0
	x_WCHAR_T_                             = 0
	x_WCHAR_T_DECLARED                     = 0
	x_WCHAR_T_DEFINED                      = 0
	x_WCHAR_T_DEFINED_                     = 0
	x_WCHAR_T_H                            = 0
	xlinux                                 = 1
	xunix                                  = 1
)

type xptrdiff_t = int64 /* <builtin>:3:26 */

type xsize_t = uint64 /* <builtin>:9:23 */

type xwchar_t = int32 /* <builtin>:15:24 */

type x__int128_t = [2]int64   /* <builtin>:21:24 */ //TODO
type x__uint128_t = [2]uint64 /* <builtin>:22:25 */ //TODO

type x__builtin_va_list = uintptr /* <builtin>:47:14 */
type x__float128 = float64        /* <builtin>:48:21 */

// A null pointer constant.

// XPG requires a few symbols from <sys/wait.h> being defined.
// Definitions of flag bits for `waitpid' et al.
//    Copyright (C) 1992-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Bits in the third argument to `waitpid'.

// Bits in the fourth argument to `waitid'.

// Definitions of status bits for `wait' et al.
//    Copyright (C) 1992-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Everything extant so far uses these same bits.

// If WIFEXITED(STATUS), the low-order 8 bits of the status.

// If WIFSIGNALED(STATUS), the terminating signal.

// If WIFSTOPPED(STATUS), the signal that stopped the child.

// Nonzero if STATUS indicates normal termination.

// Nonzero if STATUS indicates termination by a signal.

// Nonzero if STATUS indicates the child is stopped.

// Nonzero if STATUS indicates the child continued after a stop.  We only
//    define this if <bits/waitflags.h> provides the WCONTINUED flag bit.

// Nonzero if STATUS indicates the child dumped core.

// Macros for constructing status values.

// Define the macros <sys/wait.h> also would define this way.

// _FloatN API tests for enablement.
// Macros to control TS 18661-3 glibc features on x86.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the IEEE 754 binary128 format, and this
//    glibc includes corresponding *f128 interfaces for it.  The required
//    libgcc support was added some time after the basic compiler
//    support, for x86_64 and x86.

// Defined to 1 if __HAVE_FLOAT128 is 1 and the type is ABI-distinct
//    from the default float, double and long double types in this glibc.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the right format for _Float64x, and this
//    glibc includes corresponding *f64x interfaces for it.

// Defined to 1 if __HAVE_FLOAT64X is 1 and _Float64x has the format
//    of long double.  Otherwise, if __HAVE_FLOAT64X is 1, _Float64x has
//    the format of _Float128, which must be different from that of long
//    double.

// Defined to concatenate the literal suffix to be used with _Float128
//    types, if __HAVE_FLOAT128 is 1.

// Defined to a complex binary128 type if __HAVE_FLOAT128 is 1.

// The remaining of this file provides support for older compilers.

// The type _Float128 exists only since GCC 7.0.

// __builtin_huge_valf128 doesn't exist before GCC 7.0.

// Older GCC has only a subset of built-in functions for _Float128 on
//    x86, and __builtin_infq is not usable in static initializers.
//    Converting a narrower sNaN to _Float128 produces a quiet NaN, so
//    attempts to use _Float128 sNaNs will not work properly with older
//    compilers.

// In math/math.h, __MATH_TG will expand signbit to __builtin_signbit*,
//    e.g.: __builtin_signbitf128, before GCC 6.  However, there has never
//    been a __builtin_signbitf128 in GCC and the type-generic builtin is
//    only available since GCC 6.

// Macros to control TS 18661-3 glibc features where the same
//    definitions are appropriate for all platforms.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Properties of long double type.  ldbl-96 version.
//    Copyright (C) 2016-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License  published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// long double is distinct from double, so there is nothing to
//    define here.

// This header should be included at the bottom of each bits/floatn.h.
//    It defines the following macros for each _FloatN and _FloatNx type,
//    where the same definitions, or definitions based only on the macros
//    in bits/floatn.h, are appropriate for all glibc configurations.

// Defined to 1 if the current compiler invocation provides a
//    floating-point type with the right format for this type, and this
//    glibc includes corresponding *fN or *fNx interfaces for it.

// Defined to 1 if the corresponding __HAVE_<type> macro is 1 and the
//    type is the first with its format in the sequence of (the default
//    choices for) float, double, long double, _Float16, _Float32,
//    _Float64, _Float128, _Float32x, _Float64x, _Float128x for this
//    glibc; that is, if functions present once per floating-point format
//    rather than once per type are present for this type.
//
//    All configurations supported by glibc have _Float32 the same format
//    as float, _Float64 and _Float32x the same format as double, the
//    _Float64x the same format as either long double or _Float128.  No
//    configurations support _Float128x or, as of GCC 7, have compiler
//    support for a type meeting the requirements for _Float128x.

// Defined to 1 if the corresponding _FloatN type is not binary compatible
//    with the corresponding ISO C type in the current compilation unit as
//    opposed to __HAVE_DISTINCT_FLOATN, which indicates the default types built
//    in glibc.

// Defined to 1 if any _FloatN or _FloatNx types that are not
//    ABI-distinct are however distinct types at the C language level (so
//    for the purposes of __builtin_types_compatible_p and _Generic).

// Defined to concatenate the literal suffix to be used with _FloatN
//    or _FloatNx types, if __HAVE_<type> is 1.  The corresponding
//    literal suffixes exist since GCC 7, for C only.

// Defined to a complex type if __HAVE_<type> is 1.

// The remaining of this file provides support for older compilers.

// If double, long double and _Float64 all have the same set of
//    values, TS 18661-3 requires the usual arithmetic conversions on
//    long double and _Float64 to produce _Float64.  For this to be the
//    case when building with a compiler without a distinct _Float64
//    type, _Float64 must be a typedef for long double, not for
//    double.

// Returned by `div'.
type xdiv_t = struct {
	xquot int32
	xrem  int32
} /* stdlib.h:62:5 */

// Returned by `ldiv'.
type xldiv_t = struct {
	xquot int64
	xrem  int64
} /* stdlib.h:70:5 */

// Returned by `lldiv'.
type xlldiv_t = struct {
	xquot int64
	xrem  int64
} /* stdlib.h:80:5 */

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

//	POSIX Standard: 2.6 Primitive System Data Types	<sys/types.h>

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.
// Bit size of the time_t type at glibc build time, x86-64 and x32 case.
//    Copyright (C) 2018-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// For others, time size is word size.

// Convenience types.
type x__u_char = uint8   /* types.h:31:23 */
type x__u_short = uint16 /* types.h:32:28 */
type x__u_int = uint32   /* types.h:33:22 */
type x__u_long = uint64  /* types.h:34:27 */

// Fixed-size types, underlying types depend on word size and compiler.
type x__int8_t = int8     /* types.h:37:21 */
type x__uint8_t = uint8   /* types.h:38:23 */
type x__int16_t = int16   /* types.h:39:26 */
type x__uint16_t = uint16 /* types.h:40:28 */
type x__int32_t = int32   /* types.h:41:20 */
type x__uint32_t = uint32 /* types.h:42:22 */
type x__int64_t = int64   /* types.h:44:25 */
type x__uint64_t = uint64 /* types.h:45:27 */

// Smallest types with at least a given width.
type x__int_least8_t = x__int8_t     /* types.h:52:18 */
type x__uint_least8_t = x__uint8_t   /* types.h:53:19 */
type x__int_least16_t = x__int16_t   /* types.h:54:19 */
type x__uint_least16_t = x__uint16_t /* types.h:55:20 */
type x__int_least32_t = x__int32_t   /* types.h:56:19 */
type x__uint_least32_t = x__uint32_t /* types.h:57:20 */
type x__int_least64_t = x__int64_t   /* types.h:58:19 */
type x__uint_least64_t = x__uint64_t /* types.h:59:20 */

// quad_t is also 64 bits.
type x__quad_t = int64    /* types.h:63:18 */
type x__u_quad_t = uint64 /* types.h:64:27 */

// Largest integral types.
type x__intmax_t = int64   /* types.h:72:18 */
type x__uintmax_t = uint64 /* types.h:73:27 */

// The machine-dependent file <bits/typesizes.h> defines __*_T_TYPE
//    macros for each of the OS types we define below.  The definitions
//    of those macros must use the following macros for underlying types.
//    We define __S<SIZE>_TYPE and __U<SIZE>_TYPE for the signed and unsigned
//    variants of each of the following integer types on this machine.
//
// 	16		-- "natural" 16-bit type (always short)
// 	32		-- "natural" 32-bit type (always int)
// 	64		-- "natural" 64-bit type (long or long long)
// 	LONG32		-- 32-bit type, traditionally long
// 	QUAD		-- 64-bit type, traditionally long long
// 	WORD		-- natural type of __WORDSIZE bits (int or long)
// 	LONGWORD	-- type of __WORDSIZE bits, traditionally long
//
//    We distinguish WORD/LONGWORD, 32/LONG32, and 64/QUAD so that the
//    conventional uses of `long' or `long long' type modifiers match the
//    types we define, even when a less-adorned type would be the same size.
//    This matters for (somewhat) portably writing printf/scanf formats for
//    these types, where using the appropriate l or ll format modifiers can
//    make the typedefs and the formats match up across all GNU platforms.  If
//    we used `long' when it's 64 bits where `long long' is expected, then the
//    compiler would warn about the formats not matching the argument types,
//    and the programmer changing them to shut up the compiler would break the
//    program's portability.
//
//    Here we assume what is presently the case in all the GCC configurations
//    we support: long long is always 64 bits, long is always word/address size,
//    and int is always 32 bits.

// No need to mark the typedef with __extension__.
// bits/typesizes.h -- underlying types for *_t.  Linux/x86-64 version.
//    Copyright (C) 2012-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// See <bits/types.h> for the meaning of these macros.  This file exists so
//    that <bits/types.h> need not vary across different GNU platforms.

// X32 kernel interface is 64-bit.

// Tell the libc code that off_t and off64_t are actually the same type
//    for all ABI purposes, even if possibly expressed as different base types
//    for C type-checking purposes.

// Same for ino_t and ino64_t.

// And for __rlim_t and __rlim64_t.

// And for fsblkcnt_t, fsblkcnt64_t, fsfilcnt_t and fsfilcnt64_t.

// And for getitimer, setitimer and rusage

// Number of descriptors that can fit in an `fd_set'.

// bits/time64.h -- underlying types for __time64_t.  Generic version.
//    Copyright (C) 2018-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Define __TIME64_T_TYPE so that it is always a 64-bit type.

// If we already have 64-bit time type then use it.

type x__dev_t = uint64                     /* types.h:145:25 */ // Type of device numbers.
type x__uid_t = uint32                     /* types.h:146:25 */ // Type of user identifications.
type x__gid_t = uint32                     /* types.h:147:25 */ // Type of group identifications.
type x__ino_t = uint64                     /* types.h:148:25 */ // Type of file serial numbers.
type x__ino64_t = uint64                   /* types.h:149:27 */ // Type of file serial numbers (LFS).
type x__mode_t = uint32                    /* types.h:150:26 */ // Type of file attribute bitmasks.
type x__nlink_t = uint64                   /* types.h:151:27 */ // Type of file link counts.
type x__off_t = int64                      /* types.h:152:25 */ // Type of file sizes and offsets.
type x__off64_t = int64                    /* types.h:153:27 */ // Type of file sizes and offsets (LFS).
type x__pid_t = int32                      /* types.h:154:25 */ // Type of process identifications.
type x__fsid_t = struct{ x__val [2]int32 } /* types.h:155:26 */ // Type of file system IDs.
type x__clock_t = int64                    /* types.h:156:27 */ // Type of CPU usage counts.
type x__rlim_t = uint64                    /* types.h:157:26 */ // Type for resource measurement.
type x__rlim64_t = uint64                  /* types.h:158:28 */ // Type for resource measurement (LFS).
type x__id_t = uint32                      /* types.h:159:24 */ // General type for IDs.
type x__time_t = int64                     /* types.h:160:26 */ // Seconds since the Epoch.
type x__useconds_t = uint32                /* types.h:161:30 */ // Count of microseconds.
type x__suseconds_t = int64                /* types.h:162:31 */ // Signed count of microseconds.
type x__suseconds64_t = int64              /* types.h:163:33 */

type x__daddr_t = int32 /* types.h:165:27 */ // The type of a disk address.
type x__key_t = int32   /* types.h:166:25 */ // Type of an IPC key.

// Clock ID used in clock and timer functions.
type x__clockid_t = int32 /* types.h:169:29 */

// Timer ID returned by `timer_create'.
type x__timer_t = uintptr /* types.h:172:12 */

// Type to represent block size.
type x__blksize_t = int64 /* types.h:175:29 */

// Types from the Large File Support interface.

// Type to count number of disk blocks.
type x__blkcnt_t = int64   /* types.h:180:28 */
type x__blkcnt64_t = int64 /* types.h:181:30 */

// Type to count file system blocks.
type x__fsblkcnt_t = uint64   /* types.h:184:30 */
type x__fsblkcnt64_t = uint64 /* types.h:185:32 */

// Type to count file system nodes.
type x__fsfilcnt_t = uint64   /* types.h:188:30 */
type x__fsfilcnt64_t = uint64 /* types.h:189:32 */

// Type of miscellaneous file system fields.
type x__fsword_t = int64 /* types.h:192:28 */

type x__ssize_t = int64 /* types.h:194:27 */ // Type of a byte count, or error.

// Signed long type used in system calls.
type x__syscall_slong_t = int64 /* types.h:197:33 */
// Unsigned long type used in system calls.
type x__syscall_ulong_t = uint64 /* types.h:199:33 */

// These few don't really vary by system, they always correspond
//    to one of the other defined types.
type x__loff_t = x__off64_t /* types.h:203:19 */ // Type of file sizes and offsets (LFS).
type x__caddr_t = uintptr   /* types.h:204:14 */

// Duplicates info from stdint.h but this is used in unistd.h.
type x__intptr_t = int64 /* types.h:207:25 */

// Duplicate info from sys/socket.h.
type x__socklen_t = uint32 /* types.h:210:23 */

// C99: An integer type that can be accessed as an atomic entity,
//    even in the presence of asynchronous interrupts.
//    It is not currently necessary for this to be machine-specific.
type x__sig_atomic_t = int32 /* types.h:215:13 */

// Seconds since the Epoch, visible to user code when time_t is too
//    narrow only for consistency with the old way of widening too-narrow
//    types.  User code should never use __time64_t.

type xu_char = x__u_char     /* types.h:33:18 */
type xu_short = x__u_short   /* types.h:34:19 */
type xu_int = x__u_int       /* types.h:35:17 */
type xu_long = x__u_long     /* types.h:36:18 */
type xquad_t = x__quad_t     /* types.h:37:18 */
type xu_quad_t = x__u_quad_t /* types.h:38:20 */
type xfsid_t = x__fsid_t     /* types.h:39:18 */
type xloff_t = x__loff_t     /* types.h:42:18 */

type xino_t = x__ino64_t /* types.h:49:19 */

type xdev_t = x__dev_t /* types.h:59:17 */

type xgid_t = x__gid_t /* types.h:64:17 */

type xmode_t = x__mode_t /* types.h:69:18 */

type xnlink_t = x__nlink_t /* types.h:74:19 */

type xuid_t = x__uid_t /* types.h:79:17 */

type xoff_t = x__off64_t /* types.h:87:19 */

type xpid_t = x__pid_t /* types.h:97:17 */

type xid_t = x__id_t /* types.h:103:16 */

type xssize_t = x__ssize_t /* types.h:108:19 */

type xdaddr_t = x__daddr_t /* types.h:114:19 */
type xcaddr_t = x__caddr_t /* types.h:115:19 */

type xkey_t = x__key_t /* types.h:121:17 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `clock'.
type xclock_t = x__clock_t /* clock_t.h:7:19 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Clock ID used in clock and timer functions.
type xclockid_t = x__clockid_t /* clockid_t.h:7:21 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Returned by `time'.
type xtime_t = x__time_t /* time_t.h:7:18 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Timer ID returned by `timer_create'.
type xtimer_t = x__timer_t /* timer_t.h:7:19 */

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//    There's no way to win with the other order!  Sun lossage.

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// A null pointer constant.

// Old compatibility names for C types.
type xulong = uint64  /* types.h:148:27 */
type xushort = uint16 /* types.h:149:28 */
type xuint = uint32   /* types.h:150:22 */

// These size-specific names are used by some of the inet code.

// Define intN_t types.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

type xint8_t = x__int8_t   /* stdint-intn.h:24:18 */
type xint16_t = x__int16_t /* stdint-intn.h:25:19 */
type xint32_t = x__int32_t /* stdint-intn.h:26:19 */
type xint64_t = x__int64_t /* stdint-intn.h:27:19 */

// These were defined by ISO C without the first `_'.
type xu_int8_t = x__uint8_t   /* types.h:158:19 */
type xu_int16_t = x__uint16_t /* types.h:159:20 */
type xu_int32_t = x__uint32_t /* types.h:160:20 */
type xu_int64_t = x__uint64_t /* types.h:161:20 */

type xregister_t = int32 /* types.h:164:13 */

// It also defines `fd_set' and the FD_* macros for `select'.
// `fd_set' type and related macros, and `select'/`pselect' declarations.
//    Copyright (C) 1996-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

//	POSIX 1003.1g: 6.2 Select from File Descriptor Sets <sys/select.h>

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Get definition of needed basic types.
// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Get __FD_* definitions.
// Copyright (C) 1997-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// We don't use `memset' because this would require a prototype and
//    the array isn't too big.

// Get sigset_t.

type x__sigset_t = struct{ x__val [16]uint64 } /* __sigset_t.h:8:3 */

// A set of signals to be blocked, unblocked, or waited for.
type xsigset_t = x__sigset_t /* sigset_t.h:7:20 */

// Get definition of timer specification structures.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// A time value that is accurate to the nearest
//    microsecond but also has a range of years.
type xtimeval = struct {
	xtv_sec  x__time_t
	xtv_usec x__suseconds_t
} /* struct_timeval.h:8:1 */

// NB: Include guard matches what <linux/time.h> uses.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Endian macros for string.h functions
//    Copyright (C) 1992-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

// POSIX.1b structure for a time value.  This is like a `struct timeval' but
//    has nanoseconds instead of microseconds.
type xtimespec = struct {
	xtv_sec  x__time_t
	xtv_nsec x__syscall_slong_t
} /* struct_timespec.h:10:1 */

type xsuseconds_t = x__suseconds_t /* select.h:43:23 */

// The fd_set member is required to be an array of longs.
type x__fd_mask = int64 /* select.h:49:18 */

// Some versions of <linux/posix_types.h> define this macros.
// It's easier to assume 8-bit bytes than to get CHAR_BIT.

// fd_set for select and pselect.
type xfd_set = struct{ x__fds_bits [16]x__fd_mask } /* select.h:70:5 */

// Maximum number of file descriptors in `fd_set'.

// Sometimes the fd_set member is assumed to have this type.
type xfd_mask = x__fd_mask /* select.h:77:19 */

// Define some inlines helping to catch common problems.

type xblksize_t = x__blksize_t /* types.h:185:21 */

// Types from the Large File Support interface.
type xblkcnt_t = x__blkcnt64_t     /* types.h:205:22 */ // Type to count number of disk blocks.
type xfsblkcnt_t = x__fsblkcnt64_t /* types.h:209:24 */ // Type to count file system blocks.
type xfsfilcnt_t = x__fsfilcnt64_t /* types.h:213:24 */ // Type to count file system inodes.

// Now add the thread types.
// Declaration of common pthread types for all architectures.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// For internal mutex and condition variable definitions.
// Common threading primitives definitions for both POSIX and C11.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Arch-specific definitions.  Each architecture must define the following
//    macros to define the expected sizes of pthread data types:
//
//    __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.
//    __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.
//    __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.
//    __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.
//    __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.
//    __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.
//    __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.
//    __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.
//    __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.
//
//    The additional macro defines any constraint for the lock alignment
//    inside the thread structures:
//
//    __LOCK_ALIGNMENT - for internal lock/futex usage.
//
//    Same idea but for the once locking primitive:
//
//    __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.

// Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Common definition of pthread_mutex_t.

type x__pthread_internal_list = struct {
	x__prev uintptr
	x__next uintptr
} /* thread-shared-types.h:49:9 */

// Type to count file system inodes.

// Now add the thread types.
// Declaration of common pthread types for all architectures.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// For internal mutex and condition variable definitions.
// Common threading primitives definitions for both POSIX and C11.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Arch-specific definitions.  Each architecture must define the following
//    macros to define the expected sizes of pthread data types:
//
//    __SIZEOF_PTHREAD_ATTR_T        - size of pthread_attr_t.
//    __SIZEOF_PTHREAD_MUTEX_T       - size of pthread_mutex_t.
//    __SIZEOF_PTHREAD_MUTEXATTR_T   - size of pthread_mutexattr_t.
//    __SIZEOF_PTHREAD_COND_T        - size of pthread_cond_t.
//    __SIZEOF_PTHREAD_CONDATTR_T    - size of pthread_condattr_t.
//    __SIZEOF_PTHREAD_RWLOCK_T      - size of pthread_rwlock_t.
//    __SIZEOF_PTHREAD_RWLOCKATTR_T  - size of pthread_rwlockattr_t.
//    __SIZEOF_PTHREAD_BARRIER_T     - size of pthread_barrier_t.
//    __SIZEOF_PTHREAD_BARRIERATTR_T - size of pthread_barrierattr_t.
//
//    The additional macro defines any constraint for the lock alignment
//    inside the thread structures:
//
//    __LOCK_ALIGNMENT - for internal lock/futex usage.
//
//    Same idea but for the once locking primitive:
//
//    __ONCE_ALIGNMENT - for pthread_once_t/once_flag definition.

// Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Determine the wordsize from the preprocessor defines.

// Both x86-64 and x32 use the 64-bit system call interface.

// Common definition of pthread_mutex_t.

type x__pthread_list_t = x__pthread_internal_list /* thread-shared-types.h:53:3 */

type x__pthread_internal_slist = struct{ x__next uintptr } /* thread-shared-types.h:55:9 */

type x__pthread_slist_t = x__pthread_internal_slist /* thread-shared-types.h:58:3 */

// Arch-specific mutex definitions.  A generic implementation is provided
//    by sysdeps/nptl/bits/struct_mutex.h.  If required, an architecture
//    can override it by defining:
//
//    1. struct __pthread_mutex_s (used on both pthread_mutex_t and mtx_t
//       definition).  It should contains at least the internal members
//       defined in the generic version.
//
//    2. __LOCK_ALIGNMENT for any extra attribute for internal lock used with
//       atomic operations.
//
//    3. The macro __PTHREAD_MUTEX_INITIALIZER used for static initialization.
//       It should initialize the mutex internal flag.

// x86 internal mutex struct definitions.
//    Copyright (C) 2019-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

type x__pthread_mutex_s = struct {
	x__lock    int32
	x__count   uint32
	x__owner   int32
	x__nusers  uint32
	x__kind    int32
	x__spins   int16
	x__elision int16
	x__list    x__pthread_list_t
} /* struct_mutex.h:22:1 */

// Arch-sepecific read-write lock definitions.  A generic implementation is
//    provided by struct_rwlock.h.  If required, an architecture can override it
//    by defining:
//
//    1. struct __pthread_rwlock_arch_t (used on pthread_rwlock_t definition).
//       It should contain at least the internal members defined in the
//       generic version.
//
//    2. The macro __PTHREAD_RWLOCK_INITIALIZER used for static initialization.
//       It should initialize the rwlock internal type.

// x86 internal rwlock struct definitions.
//    Copyright (C) 2019-2020 Free Software Foundation, Inc.
//
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <http://www.gnu.org/licenses/>.

type x__pthread_rwlock_arch_t = struct {
	x__readers       uint32
	x__writers       uint32
	x__wrphase_futex uint32
	x__writers_futex uint32
	x__pad3          uint32
	x__pad4          uint32
	x__cur_writer    int32
	x__shared        int32
	x__rwelision     int8
	x__pad1          [7]uint8
	x__pad2          uint64
	x__flags         uint32
	_                [4]byte
} /* struct_rwlock.h:23:1 */

// Common definition of pthread_cond_t.

type x__pthread_cond_s = struct {
	x__0            struct{ x__wseq uint64 }
	x__8            struct{ x__g1_start uint64 }
	x__g_refs       [2]uint32
	x__g_size       [2]uint32
	x__g1_orig_size uint32
	x__wrefs        uint32
	x__g_signals    [2]uint32
} /* thread-shared-types.h:92:1 */

type x__tss_t = uint32  /* thread-shared-types.h:119:22 */
type x__thrd_t = uint64 /* thread-shared-types.h:120:27 */

type x__once_flag = struct{ x__data int32 } /* thread-shared-types.h:125:3 */

// Thread identifiers.  The structure of the attribute type is not
//    exposed on purpose.
type xpthread_t = uint64 /* pthreadtypes.h:27:27 */

// Data structures for mutex handling.  The structure of the attribute
//    type is not exposed on purpose.
type xpthread_mutexattr_t = struct {
	_       [0]uint32
	x__size [4]int8
} /* pthreadtypes.h:36:3 */

// Data structure for condition variable handling.  The structure of
//    the attribute type is not exposed on purpose.
type xpthread_condattr_t = struct {
	_       [0]uint32
	x__size [4]int8
} /* pthreadtypes.h:45:3 */

// Keys for thread-specific data
type xpthread_key_t = uint32 /* pthreadtypes.h:49:22 */

// Once-only execution
type xpthread_once_t = int32 /* pthreadtypes.h:53:30 */

type xpthread_attr_t1 = struct {
	_       [0]uint64
	x__size [56]int8
} /* pthreadtypes.h:56:1 */

type xpthread_attr_t = xpthread_attr_t1 /* pthreadtypes.h:62:30 */

type xpthread_mutex_t = struct{ x__data x__pthread_mutex_s } /* pthreadtypes.h:72:3 */

type xpthread_cond_t = struct{ x__data x__pthread_cond_s } /* pthreadtypes.h:80:3 */

// Data structure for reader-writer lock variable handling.  The
//    structure of the attribute type is deliberately not exposed.
type xpthread_rwlock_t = struct{ x__data x__pthread_rwlock_arch_t } /* pthreadtypes.h:91:3 */

type xpthread_rwlockattr_t = struct {
	_       [0]uint64
	x__size [8]int8
} /* pthreadtypes.h:97:3 */

// POSIX spinlock data type.
type xpthread_spinlock_t = int32 /* pthreadtypes.h:103:22 */

// POSIX barriers data type.  The structure of the type is
//    deliberately not exposed.
type xpthread_barrier_t = struct {
	_       [0]uint64
	x__size [32]int8
} /* pthreadtypes.h:112:3 */

type xpthread_barrierattr_t = struct {
	_       [0]uint32
	x__size [4]int8
} /* pthreadtypes.h:118:3 */

// Reentrant versions of the `random' family of functions.
//    These functions all use the following data structure to contain
//    state, rather than global state variables.

type xrandom_data = struct {
	xfptr      uintptr
	xrptr      uintptr
	xstate     uintptr
	xrand_type int32
	xrand_deg  int32
	xrand_sep  int32
	_          [4]byte
	xend_ptr   uintptr
} /* stdlib.h:423:1 */

// Data structure for communication with thread safe versions.  This
//    type is to be regarded as opaque.  It's only exported because users
//    have to allocate objects of this type.
type xdrand48_data = struct {
	x__x     [3]uint16
	x__old_x [3]uint16
	x__c     uint16
	x__init  uint16
	x__a     uint64
} /* stdlib.h:490:1 */

// Shorthand for type of comparison functions.
type x__compar_fn_t = uintptr /* stdlib.h:808:13 */

// Floating-point inline functions for stdlib.h.
//    Copyright (C) 2012-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Define some macros helping to catch buffer overflows.

// Macros to control TS 18661-3 glibc features on x86.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Define ISO C stdio on top of C++ iostreams.
//    Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

//	ISO C99 Standard: 7.19 Input/output	<stdio.h>

// Handle feature test macros at the start of a header.
//    Copyright (C) 2016-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// This header is internal to glibc and should not be included outside
//    of glibc headers.  Headers including it must define
//    __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION first.  This header
//    cannot have multiple include guards because ISO C feature test
//    macros depend on the definition of the macro when an affected
//    header is included, not when the first system header is
//    included.

// Copyright (C) 1991-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// ISO/IEC TR 24731-2:2010 defines the __STDC_WANT_LIB_EXT2__
//    macro.

// ISO/IEC TS 18661-1:2014 defines the __STDC_WANT_IEC_60559_BFP_EXT__
//    macro.  Most but not all symbols enabled by that macro in TS
//    18661-1 are enabled unconditionally in C2X; the symbols in Annex F
//    still require that macro in C2X.

// ISO/IEC TS 18661-4:2015 defines the
//    __STDC_WANT_IEC_60559_FUNCS_EXT__ macro.  Other than the reduction
//    functions, the symbols from this TS are enabled unconditionally in
//    C2X.

// ISO/IEC TS 18661-3:2015 defines the
//    __STDC_WANT_IEC_60559_TYPES_EXT__ macro.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.17  Common definitions  <stddef.h>

// Any one of these symbols __need_* means that GNU libc
//    wants us just to define one data type.  So don't define
//    the symbols that indicate this file's entire job has been done.

// This avoids lossage on SunOS but only if stdtypes.h comes first.
//    There's no way to win with the other order!  Sun lossage.

// Sequent's header files use _PTRDIFF_T_ in some conflicting way.
//    Just ignore it.

// On VxWorks, <type/vxTypesBase.h> may have defined macros like
//    _TYPE_size_t which will typedef size_t.  fixincludes patched the
//    vxTypesBase.h so that this macro is only defined if _GCC_SIZE_T is
//    not defined, and so that defining this macro defines _GCC_SIZE_T.
//    If we find that the macros are still defined at this point, we must
//    invoke them so that the type is defined as expected.

// In case nobody has defined these types, but we aren't running under
//    GCC 2.00, make sure that __PTRDIFF_TYPE__, __SIZE_TYPE__, and
//    __WCHAR_TYPE__ have reasonable values.  This can happen if the
//    parts of GCC is compiled by an older compiler, that actually
//    include gstddef.h, such as collect2.

// Signed type of difference of two pointers.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Unsigned type of `sizeof' something.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// Wide character type.
//    Locale-writers should change this as necessary to
//    be big enough to hold unique values not between 0 and 127,
//    and not (wchar_t) -1, for each defined multibyte character.

// Define this type if we are doing the whole job,
//    or if we want this type in particular.

// A null pointer constant.

// Copyright (C) 1989-2020 Free Software Foundation, Inc.
//
// This file is part of GCC.
//
// GCC is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 3, or (at your option)
// any later version.
//
// GCC is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.
//
// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// <http://www.gnu.org/licenses/>.

// ISO C Standard:  7.15  Variable arguments  <stdarg.h>

// Define __gnuc_va_list.

type x__gnuc_va_list = x__builtin_va_list /* stdarg.h:40:27 */

// Define the standard macros for the user,
//    if this invocation was from the user program.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// Integral type unchanged by default argument promotions that can
//    hold any value corresponding to members of the extended character
//    set, as well as at least one value that does not correspond to any
//    member of the extended character set.

// Conversion state information.
type x__mbstate_t = struct {
	x__count int32
	x__value struct{ x__wch uint32 }
} /* __mbstate_t.h:21:3 */

// The tag name of this struct is _G_fpos_t to preserve historic
//    C++ mangled names for functions taking fpos_t arguments.
//    That name should not be used in new code.
type x_G_fpos_t = struct {
	x__pos   x__off_t
	x__state x__mbstate_t
} /* __fpos_t.h:10:9 */

// The tag name of this struct is _G_fpos_t to preserve historic
//    C++ mangled names for functions taking fpos_t arguments.
//    That name should not be used in new code.
type x__fpos_t = x_G_fpos_t /* __fpos_t.h:14:3 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// The tag name of this struct is _G_fpos64_t to preserve historic
//    C++ mangled names for functions taking fpos_t and/or fpos64_t
//    arguments.  That name should not be used in new code.
type x_G_fpos64_t = struct {
	x__pos   x__off64_t
	x__state x__mbstate_t
} /* __fpos64_t.h:10:9 */

// bits/types.h -- definitions of __*_t types underlying *_t types.
//    Copyright (C) 2002-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Never include this file directly; use <sys/types.h> instead.

// The tag name of this struct is _G_fpos64_t to preserve historic
//    C++ mangled names for functions taking fpos_t and/or fpos64_t
//    arguments.  That name should not be used in new code.
type x__fpos64_t = x_G_fpos64_t /* __fpos64_t.h:14:3 */

type x_IO_FILE = struct {
	x_flags          int32
	_                [4]byte
	x_IO_read_ptr    uintptr
	x_IO_read_end    uintptr
	x_IO_read_base   uintptr
	x_IO_write_base  uintptr
	x_IO_write_ptr   uintptr
	x_IO_write_end   uintptr
	x_IO_buf_base    uintptr
	x_IO_buf_end     uintptr
	x_IO_save_base   uintptr
	x_IO_backup_base uintptr
	x_IO_save_end    uintptr
	x_markers        uintptr
	x_chain          uintptr
	x_fileno         int32
	x_flags2         int32
	x_old_offset     x__off_t
	x_cur_column     uint16
	x_vtable_offset  int8
	x_shortbuf       [1]int8
	_                [4]byte
	x_lock           uintptr
	x_offset         x__off64_t
	x_codecvt        uintptr
	x_wide_data      uintptr
	x_freeres_list   uintptr
	x_freeres_buf    uintptr
	x__pad5          xsize_t
	x_mode           int32
	x_unused2        [20]int8
} /* __FILE.h:4:1 */

type x__FILE = x_IO_FILE /* __FILE.h:5:25 */

// The opaque type of streams.  This is the definition used elsewhere.
type xFILE = x_IO_FILE /* FILE.h:7:25 */

// These macros are used by bits/stdio.h and internal headers.

// Many more flag bits are defined internally.

type xva_list = x__gnuc_va_list /* stdio.h:52:24 */

// The type of the second argument to `fgetpos' and `fsetpos'.
type xfpos_t = x__fpos64_t /* stdio.h:86:20 */

// CAPI3REF: 64-Bit Integer Types
// KEYWORDS: sqlite_int64 sqlite_uint64
//
// Because there is no cross-platform way to specify 64-bit integer types
// SQLite includes typedefs for 64-bit signed and unsigned integers.
//
// The sqlite3_int64 and sqlite3_uint64 are the preferred type definitions.
// The sqlite_int64 and sqlite_uint64 types are supported for backwards
// compatibility only.
//
// ^The sqlite3_int64 and sqlite_int64 types can store integer values
// between -9223372036854775808 and +9223372036854775807 inclusive.  ^The
// sqlite3_uint64 and sqlite_uint64 types can store integer values
// between 0 and +18446744073709551615 inclusive.
type xsqlite_int64 = int64            /* sqlite3.h:278:25 */
type xsqlite_uint64 = uint64          /* sqlite3.h:279:34 */
type xsqlite3_int64 = xsqlite_int64   /* sqlite3.h:281:22 */
type xsqlite3_uint64 = xsqlite_uint64 /* sqlite3.h:282:23 */

// The type for a callback function.
// This is legacy and deprecated.  It is included for historical
// compatibility and is not documented.
type xsqlite3_callback = uintptr /* sqlite3.h:338:13 */

// CAPI3REF: Result Codes
// KEYWORDS: {result code definitions}
//
// Many SQLite functions return an integer result code from the set shown
// here in order to indicate success or failure.
//
// New error codes may be added in future versions of SQLite.
//
// See also: [extended result code definitions]
// beginning-of-error-codes
// end-of-error-codes

// CAPI3REF: Extended Result Codes
// KEYWORDS: {extended result code definitions}
//
// In its default configuration, SQLite API routines return one of 30 integer
// [result codes].  However, experience has shown that many of
// these result codes are too coarse-grained.  They do not provide as
// much information about problems as programmers might like.  In an effort to
// address this, newer versions of SQLite (version 3.3.8 [dateof:3.3.8]
// and later) include
// support for additional result codes that provide more detailed information
// about errors. These [extended result codes] are enabled or disabled
// on a per database connection basis using the
// [sqlite3_extended_result_codes()] API.  Or, the extended code for
// the most recent error can be obtained using
// [sqlite3_extended_errcode()].

// CAPI3REF: Flags For File Open Operations
//
// These bit values are intended for use in the
// 3rd parameter to the [sqlite3_open_v2()] interface and
// in the 4th parameter to the [sqlite3_vfs.xOpen] method.

// Reserved:                         0x00F00000
// Legacy compatibility:

// CAPI3REF: Device Characteristics
//
// The xDeviceCharacteristics method of the [sqlite3_io_methods]
// object returns an integer which is a vector of these
// bit values expressing I/O characteristics of the mass storage
// device that holds the file that the [sqlite3_io_methods]
// refers to.
//
// The SQLITE_IOCAP_ATOMIC property means that all writes of
// any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values
// mean that writes of blocks that are nnn bytes in size and
// are aligned to an address which is an integer multiple of
// nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means
// that when data is appended to a file, the data is appended
// first then the size of the file is extended, never the other
// way around.  The SQLITE_IOCAP_SEQUENTIAL property means that
// information is written to disk in the same order as calls
// to xWrite().  The SQLITE_IOCAP_POWERSAFE_OVERWRITE property means that
// after reboot following a crash or power loss, the only bytes in a
// file that were written at the application level might have changed
// and that adjacent bytes, even bytes within the same sector are
// guaranteed to be unchanged.  The SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
// flag indicates that a file cannot be deleted when open.  The
// SQLITE_IOCAP_IMMUTABLE flag indicates that the file is on
// read-only media and cannot be changed even by processes with
// elevated privileges.
//
// The SQLITE_IOCAP_BATCH_ATOMIC property means that the underlying
// filesystem supports doing multiple write operations atomically when those
// write operations are bracketed by [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] and
// [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE].

// CAPI3REF: File Locking Levels
//
// SQLite uses one of these integer values as the second
// argument to calls it makes to the xLock() and xUnlock() methods
// of an [sqlite3_io_methods] object.

// CAPI3REF: Synchronization Type Flags
//
// When SQLite invokes the xSync() method of an
// [sqlite3_io_methods] object it uses a combination of
// these integer values as the second argument.
//
// When the SQLITE_SYNC_DATAONLY flag is used, it means that the
// sync operation only needs to flush data to mass storage.  Inode
// information need not be flushed. If the lower four bits of the flag
// equal SQLITE_SYNC_NORMAL, that means to use normal fsync() semantics.
// If the lower four bits equal SQLITE_SYNC_FULL, that means
// to use Mac OS X style fullsync instead of fsync().
//
// Do not confuse the SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags
// with the [PRAGMA synchronous]=NORMAL and [PRAGMA synchronous]=FULL
// settings.  The [synchronous pragma] determines when calls to the
// xSync VFS method occur and applies uniformly across all platforms.
// The SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags determine how
// energetic or rigorous or forceful the sync operations are and
// only make a difference on Mac OSX for the default SQLite code.
// (Third-party VFS implementations might also make the distinction
// between SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL, but among the
// operating systems natively supported by SQLite, only Mac OSX
// cares about the difference.)

// CAPI3REF: OS Interface Open File Handle
//
// An [sqlite3_file] object represents an open file in the
// [sqlite3_vfs | OS interface layer].  Individual OS interface
// implementations will
// want to subclass this object by appending additional fields
// for their own use.  The pMethods entry is a pointer to an
// [sqlite3_io_methods] object that defines methods for performing
// I/O operations on the open file.
type xsqlite3_file1 = struct{ xpMethods uintptr } /* sqlite3.h:684:9 */

// CAPI3REF: Result Codes
// KEYWORDS: {result code definitions}
//
// Many SQLite functions return an integer result code from the set shown
// here in order to indicate success or failure.
//
// New error codes may be added in future versions of SQLite.
//
// See also: [extended result code definitions]
// beginning-of-error-codes
// end-of-error-codes

// CAPI3REF: Extended Result Codes
// KEYWORDS: {extended result code definitions}
//
// In its default configuration, SQLite API routines return one of 30 integer
// [result codes].  However, experience has shown that many of
// these result codes are too coarse-grained.  They do not provide as
// much information about problems as programmers might like.  In an effort to
// address this, newer versions of SQLite (version 3.3.8 [dateof:3.3.8]
// and later) include
// support for additional result codes that provide more detailed information
// about errors. These [extended result codes] are enabled or disabled
// on a per database connection basis using the
// [sqlite3_extended_result_codes()] API.  Or, the extended code for
// the most recent error can be obtained using
// [sqlite3_extended_errcode()].

// CAPI3REF: Flags For File Open Operations
//
// These bit values are intended for use in the
// 3rd parameter to the [sqlite3_open_v2()] interface and
// in the 4th parameter to the [sqlite3_vfs.xOpen] method.

// Reserved:                         0x00F00000
// Legacy compatibility:

// CAPI3REF: Device Characteristics
//
// The xDeviceCharacteristics method of the [sqlite3_io_methods]
// object returns an integer which is a vector of these
// bit values expressing I/O characteristics of the mass storage
// device that holds the file that the [sqlite3_io_methods]
// refers to.
//
// The SQLITE_IOCAP_ATOMIC property means that all writes of
// any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values
// mean that writes of blocks that are nnn bytes in size and
// are aligned to an address which is an integer multiple of
// nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means
// that when data is appended to a file, the data is appended
// first then the size of the file is extended, never the other
// way around.  The SQLITE_IOCAP_SEQUENTIAL property means that
// information is written to disk in the same order as calls
// to xWrite().  The SQLITE_IOCAP_POWERSAFE_OVERWRITE property means that
// after reboot following a crash or power loss, the only bytes in a
// file that were written at the application level might have changed
// and that adjacent bytes, even bytes within the same sector are
// guaranteed to be unchanged.  The SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN
// flag indicates that a file cannot be deleted when open.  The
// SQLITE_IOCAP_IMMUTABLE flag indicates that the file is on
// read-only media and cannot be changed even by processes with
// elevated privileges.
//
// The SQLITE_IOCAP_BATCH_ATOMIC property means that the underlying
// filesystem supports doing multiple write operations atomically when those
// write operations are bracketed by [SQLITE_FCNTL_BEGIN_ATOMIC_WRITE] and
// [SQLITE_FCNTL_COMMIT_ATOMIC_WRITE].

// CAPI3REF: File Locking Levels
//
// SQLite uses one of these integer values as the second
// argument to calls it makes to the xLock() and xUnlock() methods
// of an [sqlite3_io_methods] object.

// CAPI3REF: Synchronization Type Flags
//
// When SQLite invokes the xSync() method of an
// [sqlite3_io_methods] object it uses a combination of
// these integer values as the second argument.
//
// When the SQLITE_SYNC_DATAONLY flag is used, it means that the
// sync operation only needs to flush data to mass storage.  Inode
// information need not be flushed. If the lower four bits of the flag
// equal SQLITE_SYNC_NORMAL, that means to use normal fsync() semantics.
// If the lower four bits equal SQLITE_SYNC_FULL, that means
// to use Mac OS X style fullsync instead of fsync().
//
// Do not confuse the SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags
// with the [PRAGMA synchronous]=NORMAL and [PRAGMA synchronous]=FULL
// settings.  The [synchronous pragma] determines when calls to the
// xSync VFS method occur and applies uniformly across all platforms.
// The SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL flags determine how
// energetic or rigorous or forceful the sync operations are and
// only make a difference on Mac OSX for the default SQLite code.
// (Third-party VFS implementations might also make the distinction
// between SQLITE_SYNC_NORMAL and SQLITE_SYNC_FULL, but among the
// operating systems natively supported by SQLite, only Mac OSX
// cares about the difference.)

// CAPI3REF: OS Interface Open File Handle
//
// An [sqlite3_file] object represents an open file in the
// [sqlite3_vfs | OS interface layer].  Individual OS interface
// implementations will
// want to subclass this object by appending additional fields
// for their own use.  The pMethods entry is a pointer to an
// [sqlite3_io_methods] object that defines methods for performing
// I/O operations on the open file.
type xsqlite3_file = xsqlite3_file1 /* sqlite3.h:684:29 */
type xsqlite3_io_methods1 = struct {
	xiVersion               int32
	_                       [4]byte
	xxClose                 uintptr
	xxRead                  uintptr
	xxWrite                 uintptr
	xxTruncate              uintptr
	xxSync                  uintptr
	xxFileSize              uintptr
	xxLock                  uintptr
	xxUnlock                uintptr
	xxCheckReservedLock     uintptr
	xxFileControl           uintptr
	xxSectorSize            uintptr
	xxDeviceCharacteristics uintptr
	xxShmMap                uintptr
	xxShmLock               uintptr
	xxShmBarrier            uintptr
	xxShmUnmap              uintptr
	xxFetch                 uintptr
	xxUnfetch               uintptr
} /* sqlite3.h:684:9 */

// CAPI3REF: OS Interface File Virtual Methods Object
//
// Every file opened by the [sqlite3_vfs.xOpen] method populates an
// [sqlite3_file] object (or, more commonly, a subclass of the
// [sqlite3_file] object) with a pointer to an instance of this object.
// This object defines the methods used to perform various operations
// against the open file represented by the [sqlite3_file] object.
//
// If the [sqlite3_vfs.xOpen] method sets the sqlite3_file.pMethods element
// to a non-NULL pointer, then the sqlite3_io_methods.xClose method
// may be invoked even if the [sqlite3_vfs.xOpen] reported that it failed.  The
// only way to prevent a call to xClose following a failed [sqlite3_vfs.xOpen]
// is for the [sqlite3_vfs.xOpen] to set the sqlite3_file.pMethods element
// to NULL.
//
// The flags argument to xSync may be one of [SQLITE_SYNC_NORMAL] or
// [SQLITE_SYNC_FULL].  The first choice is the normal fsync().
// The second choice is a Mac OS X style fullsync.  The [SQLITE_SYNC_DATAONLY]
// flag may be ORed in to indicate that only the data of the file
// and not its inode needs to be synced.
//
// The integer values to xLock() and xUnlock() are one of
// <ul>
// <li> [SQLITE_LOCK_NONE],
// <li> [SQLITE_LOCK_SHARED],
// <li> [SQLITE_LOCK_RESERVED],
// <li> [SQLITE_LOCK_PENDING], or
// <li> [SQLITE_LOCK_EXCLUSIVE].
// </ul>
// xLock() increases the lock. xUnlock() decreases the lock.
// The xCheckReservedLock() method checks whether any database connection,
// either in this process or in some other process, is holding a RESERVED,
// PENDING, or EXCLUSIVE lock on the file.  It returns true
// if such a lock exists and false otherwise.
//
// The xFileControl() method is a generic interface that allows custom
// VFS implementations to directly control an open file using the
// [sqlite3_file_control()] interface.  The second "op" argument is an
// integer opcode.  The third argument is a generic pointer intended to
// point to a structure that may contain arguments or space in which to
// write return values.  Potential uses for xFileControl() might be
// functions to enable blocking locks with timeouts, to change the
// locking strategy (for example to use dot-file locks), to inquire
// about the status of a lock, or to break stale locks.  The SQLite
// core reserves all opcodes less than 100 for its own use.
// A [file control opcodes | list of opcodes] less than 100 is available.
// Applications that define a custom xFileControl method should use opcodes
// greater than 100 to avoid conflicts.  VFS implementations should
// return [SQLITE_NOTFOUND] for file control opcodes that they do not
// recognize.
//
// The xSectorSize() method returns the sector size of the
// device that underlies the file.  The sector size is the
// minimum write that can be performed without disturbing
// other bytes in the file.  The xDeviceCharacteristics()
// method returns a bit vector describing behaviors of the
// underlying device:
//
// <ul>
// <li> [SQLITE_IOCAP_ATOMIC]
// <li> [SQLITE_IOCAP_ATOMIC512]
// <li> [SQLITE_IOCAP_ATOMIC1K]
// <li> [SQLITE_IOCAP_ATOMIC2K]
// <li> [SQLITE_IOCAP_ATOMIC4K]
// <li> [SQLITE_IOCAP_ATOMIC8K]
// <li> [SQLITE_IOCAP_ATOMIC16K]
// <li> [SQLITE_IOCAP_ATOMIC32K]
// <li> [SQLITE_IOCAP_ATOMIC64K]
// <li> [SQLITE_IOCAP_SAFE_APPEND]
// <li> [SQLITE_IOCAP_SEQUENTIAL]
// <li> [SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN]
// <li> [SQLITE_IOCAP_POWERSAFE_OVERWRITE]
// <li> [SQLITE_IOCAP_IMMUTABLE]
// <li> [SQLITE_IOCAP_BATCH_ATOMIC]
// </ul>
//
// The SQLITE_IOCAP_ATOMIC property means that all writes of
// any size are atomic.  The SQLITE_IOCAP_ATOMICnnn values
// mean that writes of blocks that are nnn bytes in size and
// are aligned to an address which is an integer multiple of
// nnn are atomic.  The SQLITE_IOCAP_SAFE_APPEND value means
// that when data is appended to a file, the data is appended
// first then the size of the file is extended, never the other
// way around.  The SQLITE_IOCAP_SEQUENTIAL property means that
// information is written to disk in the same order as calls
// to xWrite().
//
// If xRead() returns SQLITE_IOERR_SHORT_READ it must also fill
// in the unread portions of the buffer with zeros.  A VFS that
// fails to zero-fill short reads might seem to work.  However,
// failure to zero-fill short reads will eventually lead to
// database corruption.
type xsqlite3_io_methods = xsqlite3_io_methods1 /* sqlite3.h:783:35 */

// CAPI3REF: OS Interface Object
//
// An instance of the sqlite3_vfs object defines the interface between
// the SQLite core and the underlying operating system.  The "vfs"
// in the name of the object stands for "virtual file system".  See
// the [VFS | VFS documentation] for further information.
//
// The VFS interface is sometimes extended by adding new methods onto
// the end.  Each time such an extension occurs, the iVersion field
// is incremented.  The iVersion value started out as 1 in
// SQLite [version 3.5.0] on [dateof:3.5.0], then increased to 2
// with SQLite [version 3.7.0] on [dateof:3.7.0], and then increased
// to 3 with SQLite [version 3.7.6] on [dateof:3.7.6].  Additional fields
// may be appended to the sqlite3_vfs object and the iVersion value
// may increase again in future versions of SQLite.
// Note that due to an oversight, the structure
// of the sqlite3_vfs object changed in the transition from
// SQLite [version 3.5.9] to [version 3.6.0] on [dateof:3.6.0]
// and yet the iVersion field was not increased.
//
// The szOsFile field is the size of the subclassed [sqlite3_file]
// structure used by this VFS.  mxPathname is the maximum length of
// a pathname in this VFS.
//
// Registered sqlite3_vfs objects are kept on a linked list formed by
// the pNext pointer.  The [sqlite3_vfs_register()]
// and [sqlite3_vfs_unregister()] interfaces manage this list
// in a thread-safe way.  The [sqlite3_vfs_find()] interface
// searches the list.  Neither the application code nor the VFS
// implementation should use the pNext pointer.
//
// The pNext field is the only field in the sqlite3_vfs
// structure that SQLite will ever modify.  SQLite will only access
// or modify this field while holding a particular static mutex.
// The application should never modify anything within the sqlite3_vfs
// object once the object has been registered.
//
// The zName field holds the name of the VFS module.  The name must
// be unique across all VFS modules.
//
// [[sqlite3_vfs.xOpen]]
// ^SQLite guarantees that the zFilename parameter to xOpen
// is either a NULL pointer or string obtained
// from xFullPathname() with an optional suffix added.
// ^If a suffix is added to the zFilename parameter, it will
// consist of a single "-" character followed by no more than
// 11 alphanumeric and/or "-" characters.
// ^SQLite further guarantees that
// the string will be valid and unchanged until xClose() is
// called. Because of the previous sentence,
// the [sqlite3_file] can safely store a pointer to the
// filename if it needs to remember the filename for some reason.
// If the zFilename parameter to xOpen is a NULL pointer then xOpen
// must invent its own temporary name for the file.  ^Whenever the
// xFilename parameter is NULL it will also be the case that the
// flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].
//
// The flags argument to xOpen() includes all bits set in
// the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()]
// or [sqlite3_open16()] is used, then flags includes at least
// [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE].
// If xOpen() opens a file read-only then it sets *pOutFlags to
// include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set.
//
// ^(SQLite will also add one of the following flags to the xOpen()
// call, depending on the object being opened:
//
// <ul>
// <li>  [SQLITE_OPEN_MAIN_DB]
// <li>  [SQLITE_OPEN_MAIN_JOURNAL]
// <li>  [SQLITE_OPEN_TEMP_DB]
// <li>  [SQLITE_OPEN_TEMP_JOURNAL]
// <li>  [SQLITE_OPEN_TRANSIENT_DB]
// <li>  [SQLITE_OPEN_SUBJOURNAL]
// <li>  [SQLITE_OPEN_SUPER_JOURNAL]
// <li>  [SQLITE_OPEN_WAL]
// </ul>)^
//
// The file I/O implementation can use the object type flags to
// change the way it deals with files.  For example, an application
// that does not care about crash recovery or rollback might make
// the open of a journal file a no-op.  Writes to this journal would
// also be no-ops, and any attempt to read the journal would return
// SQLITE_IOERR.  Or the implementation might recognize that a database
// file will be doing page-aligned sector reads and writes in a random
// order and set up its I/O subsystem accordingly.
//
// SQLite might also add one of the following flags to the xOpen method:
//
// <ul>
// <li> [SQLITE_OPEN_DELETEONCLOSE]
// <li> [SQLITE_OPEN_EXCLUSIVE]
// </ul>
//
// The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be
// deleted when it is closed.  ^The [SQLITE_OPEN_DELETEONCLOSE]
// will be set for TEMP databases and their journals, transient
// databases, and subjournals.
//
// ^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction
// with the [SQLITE_OPEN_CREATE] flag, which are both directly
// analogous to the O_EXCL and O_CREAT flags of the POSIX open()
// API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the
// SQLITE_OPEN_CREATE, is used to indicate that file should always
// be created, and that it is an error if it already exists.
// It is <i>not</i> used to indicate the file should be opened
// for exclusive access.
//
// ^At least szOsFile bytes of memory are allocated by SQLite
// to hold the [sqlite3_file] structure passed as the third
// argument to xOpen.  The xOpen method does not have to
// allocate the structure; it should just fill it in.  Note that
// the xOpen method must set the sqlite3_file.pMethods to either
// a valid [sqlite3_io_methods] object or to NULL.  xOpen must do
// this even if the open fails.  SQLite expects that the sqlite3_file.pMethods
// element will be valid after xOpen returns regardless of the success
// or failure of the xOpen call.
//
// [[sqlite3_vfs.xAccess]]
// ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS]
// to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to
// test whether a file is readable and writable, or [SQLITE_ACCESS_READ]
// to test whether a file is at least readable.  The SQLITE_ACCESS_READ
// flag is never actually used and is not implemented in the built-in
// VFSes of SQLite.  The file is named by the second argument and can be a
// directory. The xAccess method returns [SQLITE_OK] on success or some
// non-zero error code if there is an I/O error or if the name of
// the file given in the second argument is illegal.  If SQLITE_OK
// is returned, then non-zero or zero is written into *pResOut to indicate
// whether or not the file is accessible.
//
// ^SQLite will always allocate at least mxPathname+1 bytes for the
// output buffer xFullPathname.  The exact size of the output buffer
// is also passed as a parameter to both  methods. If the output buffer
// is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is
// handled as a fatal error by SQLite, vfs implementations should endeavor
// to prevent this by setting mxPathname to a sufficiently large value.
//
// The xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64()
// interfaces are not strictly a part of the filesystem, but they are
// included in the VFS structure for completeness.
// The xRandomness() function attempts to return nBytes bytes
// of good-quality randomness into zOut.  The return value is
// the actual number of bytes of randomness obtained.
// The xSleep() method causes the calling thread to sleep for at
// least the number of microseconds given.  ^The xCurrentTime()
// method returns a Julian Day Number for the current date and time as
// a floating point value.
// ^The xCurrentTimeInt64() method returns, as an integer, the Julian
// Day Number multiplied by 86400000 (the number of milliseconds in
// a 24-hour day).
// ^SQLite will use the xCurrentTimeInt64() method to get the current
// date and time if that method is available (if iVersion is 2 or
// greater and the function pointer is not NULL) and will fall back
// to xCurrentTime() if xCurrentTimeInt64() is unavailable.
//
// ^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces
// are not used by the SQLite core.  These optional interfaces are provided
// by some VFSes to facilitate testing of the VFS code. By overriding
// system calls with functions under its control, a test program can
// simulate faults and error conditions that would otherwise be difficult
// or impossible to induce.  The set of system calls that can be overridden
// varies from one VFS to another, and from one version of the same VFS to the
// next.  Applications that use these interfaces must be prepared for any
// or all of these interfaces to be NULL or for their behavior to change
// from one release to the next.  Applications must not attempt to access
// any of these methods if the iVersion of the VFS is less than 3.
type xsqlite3_vfs1 = struct {
	xiVersion          int32
	xszOsFile          int32
	xmxPathname        int32
	_                  [4]byte
	xpNext             uintptr
	xzName             uintptr
	xpAppData          uintptr
	xxOpen             uintptr
	xxDelete           uintptr
	xxAccess           uintptr
	xxFullPathname     uintptr
	xxDlOpen           uintptr
	xxDlError          uintptr
	xxDlSym            uintptr
	xxDlClose          uintptr
	xxRandomness       uintptr
	xxSleep            uintptr
	xxCurrentTime      uintptr
	xxGetLastError     uintptr
	xxCurrentTimeInt64 uintptr
	xxSetSystemCall    uintptr
	xxGetSystemCall    uintptr
	xxNextSystemCall   uintptr
} /* sqlite3.h:1368:9 */

// CAPI3REF: OS Interface Object
//
// An instance of the sqlite3_vfs object defines the interface between
// the SQLite core and the underlying operating system.  The "vfs"
// in the name of the object stands for "virtual file system".  See
// the [VFS | VFS documentation] for further information.
//
// The VFS interface is sometimes extended by adding new methods onto
// the end.  Each time such an extension occurs, the iVersion field
// is incremented.  The iVersion value started out as 1 in
// SQLite [version 3.5.0] on [dateof:3.5.0], then increased to 2
// with SQLite [version 3.7.0] on [dateof:3.7.0], and then increased
// to 3 with SQLite [version 3.7.6] on [dateof:3.7.6].  Additional fields
// may be appended to the sqlite3_vfs object and the iVersion value
// may increase again in future versions of SQLite.
// Note that due to an oversight, the structure
// of the sqlite3_vfs object changed in the transition from
// SQLite [version 3.5.9] to [version 3.6.0] on [dateof:3.6.0]
// and yet the iVersion field was not increased.
//
// The szOsFile field is the size of the subclassed [sqlite3_file]
// structure used by this VFS.  mxPathname is the maximum length of
// a pathname in this VFS.
//
// Registered sqlite3_vfs objects are kept on a linked list formed by
// the pNext pointer.  The [sqlite3_vfs_register()]
// and [sqlite3_vfs_unregister()] interfaces manage this list
// in a thread-safe way.  The [sqlite3_vfs_find()] interface
// searches the list.  Neither the application code nor the VFS
// implementation should use the pNext pointer.
//
// The pNext field is the only field in the sqlite3_vfs
// structure that SQLite will ever modify.  SQLite will only access
// or modify this field while holding a particular static mutex.
// The application should never modify anything within the sqlite3_vfs
// object once the object has been registered.
//
// The zName field holds the name of the VFS module.  The name must
// be unique across all VFS modules.
//
// [[sqlite3_vfs.xOpen]]
// ^SQLite guarantees that the zFilename parameter to xOpen
// is either a NULL pointer or string obtained
// from xFullPathname() with an optional suffix added.
// ^If a suffix is added to the zFilename parameter, it will
// consist of a single "-" character followed by no more than
// 11 alphanumeric and/or "-" characters.
// ^SQLite further guarantees that
// the string will be valid and unchanged until xClose() is
// called. Because of the previous sentence,
// the [sqlite3_file] can safely store a pointer to the
// filename if it needs to remember the filename for some reason.
// If the zFilename parameter to xOpen is a NULL pointer then xOpen
// must invent its own temporary name for the file.  ^Whenever the
// xFilename parameter is NULL it will also be the case that the
// flags parameter will include [SQLITE_OPEN_DELETEONCLOSE].
//
// The flags argument to xOpen() includes all bits set in
// the flags argument to [sqlite3_open_v2()].  Or if [sqlite3_open()]
// or [sqlite3_open16()] is used, then flags includes at least
// [SQLITE_OPEN_READWRITE] | [SQLITE_OPEN_CREATE].
// If xOpen() opens a file read-only then it sets *pOutFlags to
// include [SQLITE_OPEN_READONLY].  Other bits in *pOutFlags may be set.
//
// ^(SQLite will also add one of the following flags to the xOpen()
// call, depending on the object being opened:
//
// <ul>
// <li>  [SQLITE_OPEN_MAIN_DB]
// <li>  [SQLITE_OPEN_MAIN_JOURNAL]
// <li>  [SQLITE_OPEN_TEMP_DB]
// <li>  [SQLITE_OPEN_TEMP_JOURNAL]
// <li>  [SQLITE_OPEN_TRANSIENT_DB]
// <li>  [SQLITE_OPEN_SUBJOURNAL]
// <li>  [SQLITE_OPEN_SUPER_JOURNAL]
// <li>  [SQLITE_OPEN_WAL]
// </ul>)^
//
// The file I/O implementation can use the object type flags to
// change the way it deals with files.  For example, an application
// that does not care about crash recovery or rollback might make
// the open of a journal file a no-op.  Writes to this journal would
// also be no-ops, and any attempt to read the journal would return
// SQLITE_IOERR.  Or the implementation might recognize that a database
// file will be doing page-aligned sector reads and writes in a random
// order and set up its I/O subsystem accordingly.
//
// SQLite might also add one of the following flags to the xOpen method:
//
// <ul>
// <li> [SQLITE_OPEN_DELETEONCLOSE]
// <li> [SQLITE_OPEN_EXCLUSIVE]
// </ul>
//
// The [SQLITE_OPEN_DELETEONCLOSE] flag means the file should be
// deleted when it is closed.  ^The [SQLITE_OPEN_DELETEONCLOSE]
// will be set for TEMP databases and their journals, transient
// databases, and subjournals.
//
// ^The [SQLITE_OPEN_EXCLUSIVE] flag is always used in conjunction
// with the [SQLITE_OPEN_CREATE] flag, which are both directly
// analogous to the O_EXCL and O_CREAT flags of the POSIX open()
// API.  The SQLITE_OPEN_EXCLUSIVE flag, when paired with the
// SQLITE_OPEN_CREATE, is used to indicate that file should always
// be created, and that it is an error if it already exists.
// It is <i>not</i> used to indicate the file should be opened
// for exclusive access.
//
// ^At least szOsFile bytes of memory are allocated by SQLite
// to hold the [sqlite3_file] structure passed as the third
// argument to xOpen.  The xOpen method does not have to
// allocate the structure; it should just fill it in.  Note that
// the xOpen method must set the sqlite3_file.pMethods to either
// a valid [sqlite3_io_methods] object or to NULL.  xOpen must do
// this even if the open fails.  SQLite expects that the sqlite3_file.pMethods
// element will be valid after xOpen returns regardless of the success
// or failure of the xOpen call.
//
// [[sqlite3_vfs.xAccess]]
// ^The flags argument to xAccess() may be [SQLITE_ACCESS_EXISTS]
// to test for the existence of a file, or [SQLITE_ACCESS_READWRITE] to
// test whether a file is readable and writable, or [SQLITE_ACCESS_READ]
// to test whether a file is at least readable.  The SQLITE_ACCESS_READ
// flag is never actually used and is not implemented in the built-in
// VFSes of SQLite.  The file is named by the second argument and can be a
// directory. The xAccess method returns [SQLITE_OK] on success or some
// non-zero error code if there is an I/O error or if the name of
// the file given in the second argument is illegal.  If SQLITE_OK
// is returned, then non-zero or zero is written into *pResOut to indicate
// whether or not the file is accessible.
//
// ^SQLite will always allocate at least mxPathname+1 bytes for the
// output buffer xFullPathname.  The exact size of the output buffer
// is also passed as a parameter to both  methods. If the output buffer
// is not large enough, [SQLITE_CANTOPEN] should be returned. Since this is
// handled as a fatal error by SQLite, vfs implementations should endeavor
// to prevent this by setting mxPathname to a sufficiently large value.
//
// The xRandomness(), xSleep(), xCurrentTime(), and xCurrentTimeInt64()
// interfaces are not strictly a part of the filesystem, but they are
// included in the VFS structure for completeness.
// The xRandomness() function attempts to return nBytes bytes
// of good-quality randomness into zOut.  The return value is
// the actual number of bytes of randomness obtained.
// The xSleep() method causes the calling thread to sleep for at
// least the number of microseconds given.  ^The xCurrentTime()
// method returns a Julian Day Number for the current date and time as
// a floating point value.
// ^The xCurrentTimeInt64() method returns, as an integer, the Julian
// Day Number multiplied by 86400000 (the number of milliseconds in
// a 24-hour day).
// ^SQLite will use the xCurrentTimeInt64() method to get the current
// date and time if that method is available (if iVersion is 2 or
// greater and the function pointer is not NULL) and will fall back
// to xCurrentTime() if xCurrentTimeInt64() is unavailable.
//
// ^The xSetSystemCall(), xGetSystemCall(), and xNestSystemCall() interfaces
// are not used by the SQLite core.  These optional interfaces are provided
// by some VFSes to facilitate testing of the VFS code. By overriding
// system calls with functions under its control, a test program can
// simulate faults and error conditions that would otherwise be difficult
// or impossible to induce.  The set of system calls that can be overridden
// varies from one VFS to another, and from one version of the same VFS to the
// next.  Applications that use these interfaces must be prepared for any
// or all of these interfaces to be NULL or for their behavior to change
// from one release to the next.  Applications must not attempt to access
// any of these methods if the iVersion of the VFS is less than 3.
type xsqlite3_vfs = xsqlite3_vfs1   /* sqlite3.h:1368:28 */
type xsqlite3_syscall_ptr = uintptr /* sqlite3.h:1369:14 */

// CAPI3REF: Memory Allocation Routines
//
// An instance of this object defines the interface between SQLite
// and low-level memory allocation routines.
//
// This object is used in only one place in the SQLite interface.
// A pointer to an instance of this object is the argument to
// [sqlite3_config()] when the configuration option is
// [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].
// By creating an instance of this object
// and passing it to [sqlite3_config]([SQLITE_CONFIG_MALLOC])
// during configuration, an application can specify an alternative
// memory allocation subsystem for SQLite to use for all of its
// dynamic memory needs.
//
// Note that SQLite comes with several [built-in memory allocators]
// that are perfectly adequate for the overwhelming majority of applications
// and that this object is only useful to a tiny minority of applications
// with specialized memory allocation requirements.  This object is
// also used during testing of SQLite in order to specify an alternative
// memory allocator that simulates memory out-of-memory conditions in
// order to verify that SQLite recovers gracefully from such
// conditions.
//
// The xMalloc, xRealloc, and xFree methods must work like the
// malloc(), realloc() and free() functions from the standard C library.
// ^SQLite guarantees that the second argument to
// xRealloc is always a value returned by a prior call to xRoundup.
//
// xSize should return the allocated size of a memory allocation
// previously obtained from xMalloc or xRealloc.  The allocated size
// is always at least as big as the requested size but may be larger.
//
// The xRoundup method returns what would be the allocated size of
// a memory allocation given a particular requested size.  Most memory
// allocators round up memory allocations at least to the next multiple
// of 8.  Some allocators round up to a larger multiple or to a power of 2.
// Every memory allocation request coming in through [sqlite3_malloc()]
// or [sqlite3_realloc()] first calls xRoundup.  If xRoundup returns 0,
// that causes the corresponding memory allocation to fail.
//
// The xInit method initializes the memory allocator.  For example,
// it might allocate any required mutexes or initialize internal data
// structures.  The xShutdown method is invoked (indirectly) by
// [sqlite3_shutdown()] and should deallocate any resources acquired
// by xInit.  The pAppData pointer is used as the only parameter to
// xInit and xShutdown.
//
// SQLite holds the [SQLITE_MUTEX_STATIC_MAIN] mutex when it invokes
// the xInit method, so the xInit method need not be threadsafe.  The
// xShutdown method is only called from [sqlite3_shutdown()] so it does
// not need to be threadsafe either.  For all other methods, SQLite
// holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the
// [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which
// it is by default) and so the methods are automatically serialized.
// However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other
// methods must be threadsafe or else make their own arrangements for
// serialization.
//
// SQLite will never invoke xInit() more than once without an intervening
// call to xShutdown().
type xsqlite3_mem_methods1 = struct {
	xxMalloc   uintptr
	xxFree     uintptr
	xxRealloc  uintptr
	xxSize     uintptr
	xxRoundup  uintptr
	xxInit     uintptr
	xxShutdown uintptr
	xpAppData  uintptr
} /* sqlite3.h:1666:9 */

// CAPI3REF: Memory Allocation Routines
//
// An instance of this object defines the interface between SQLite
// and low-level memory allocation routines.
//
// This object is used in only one place in the SQLite interface.
// A pointer to an instance of this object is the argument to
// [sqlite3_config()] when the configuration option is
// [SQLITE_CONFIG_MALLOC] or [SQLITE_CONFIG_GETMALLOC].
// By creating an instance of this object
// and passing it to [sqlite3_config]([SQLITE_CONFIG_MALLOC])
// during configuration, an application can specify an alternative
// memory allocation subsystem for SQLite to use for all of its
// dynamic memory needs.
//
// Note that SQLite comes with several [built-in memory allocators]
// that are perfectly adequate for the overwhelming majority of applications
// and that this object is only useful to a tiny minority of applications
// with specialized memory allocation requirements.  This object is
// also used during testing of SQLite in order to specify an alternative
// memory allocator that simulates memory out-of-memory conditions in
// order to verify that SQLite recovers gracefully from such
// conditions.
//
// The xMalloc, xRealloc, and xFree methods must work like the
// malloc(), realloc() and free() functions from the standard C library.
// ^SQLite guarantees that the second argument to
// xRealloc is always a value returned by a prior call to xRoundup.
//
// xSize should return the allocated size of a memory allocation
// previously obtained from xMalloc or xRealloc.  The allocated size
// is always at least as big as the requested size but may be larger.
//
// The xRoundup method returns what would be the allocated size of
// a memory allocation given a particular requested size.  Most memory
// allocators round up memory allocations at least to the next multiple
// of 8.  Some allocators round up to a larger multiple or to a power of 2.
// Every memory allocation request coming in through [sqlite3_malloc()]
// or [sqlite3_realloc()] first calls xRoundup.  If xRoundup returns 0,
// that causes the corresponding memory allocation to fail.
//
// The xInit method initializes the memory allocator.  For example,
// it might allocate any required mutexes or initialize internal data
// structures.  The xShutdown method is invoked (indirectly) by
// [sqlite3_shutdown()] and should deallocate any resources acquired
// by xInit.  The pAppData pointer is used as the only parameter to
// xInit and xShutdown.
//
// SQLite holds the [SQLITE_MUTEX_STATIC_MAIN] mutex when it invokes
// the xInit method, so the xInit method need not be threadsafe.  The
// xShutdown method is only called from [sqlite3_shutdown()] so it does
// not need to be threadsafe either.  For all other methods, SQLite
// holds the [SQLITE_MUTEX_STATIC_MEM] mutex as long as the
// [SQLITE_CONFIG_MEMSTATUS] configuration option is turned on (which
// it is by default) and so the methods are automatically serialized.
// However, if [SQLITE_CONFIG_MEMSTATUS] is disabled, then the other
// methods must be threadsafe or else make their own arrangements for
// serialization.
//
// SQLite will never invoke xInit() more than once without an intervening
// call to xShutdown().
type xsqlite3_mem_methods = xsqlite3_mem_methods1 /* sqlite3.h:1666:36 */

// CAPI3REF: Constants Defining Special Destructor Behavior
//
// These are special values for the destructor that is passed in as the
// final argument to routines like [sqlite3_result_blob()].  ^If the destructor
// argument is SQLITE_STATIC, it means that the content pointer is constant
// and will never change.  It does not need to be destroyed.  ^The
// SQLITE_TRANSIENT value means that the content will likely change in
// the near future and that SQLite should make its own private copy of
// the content before returning.
//
// The typedef is necessary to work around problems in certain
// C++ compilers.
type xsqlite3_destructor_type = uintptr /* sqlite3.h:5622:14 */

// The interface to the virtual-table mechanism is currently considered
// to be experimental.  The interface might change in incompatible ways.
// If this is a problem for you, do not use the interface at this time.
//
// When the virtual-table mechanism stabilizes, we will declare the
// interface fixed, support it indefinitely, and remove this comment.

// Structures used by the virtual table interface
type xsqlite3_vtab1 = struct {
	xpModule uintptr
	xnRef    int32
	_        [4]byte
	xzErrMsg uintptr
} /* sqlite3.h:6741:9 */

// The interface to the virtual-table mechanism is currently considered
// to be experimental.  The interface might change in incompatible ways.
// If this is a problem for you, do not use the interface at this time.
//
// When the virtual-table mechanism stabilizes, we will declare the
// interface fixed, support it indefinitely, and remove this comment.

// Structures used by the virtual table interface
type xsqlite3_vtab = xsqlite3_vtab1 /* sqlite3.h:6741:29 */
type xsqlite3_index_info1 = struct {
	xnConstraint      int32
	_                 [4]byte
	xaConstraint      uintptr
	xnOrderBy         int32
	_                 [4]byte
	xaOrderBy         uintptr
	xaConstraintUsage uintptr
	xidxNum           int32
	_                 [4]byte
	xidxStr           uintptr
	xneedToFreeIdxStr int32
	xorderByConsumed  int32
	xestimatedCost    float64
	xestimatedRows    xsqlite3_int64
	xidxFlags         int32
	_                 [4]byte
	xcolUsed          xsqlite3_uint64
} /* sqlite3.h:6742:9 */

type xsqlite3_index_info = xsqlite3_index_info1       /* sqlite3.h:6742:35 */
type xsqlite3_vtab_cursor1 = struct{ xpVtab uintptr } /* sqlite3.h:6743:9 */

type xsqlite3_vtab_cursor = xsqlite3_vtab_cursor1 /* sqlite3.h:6743:36 */
type xsqlite3_module1 = struct {
	xiVersion      int32
	_              [4]byte
	xxCreate       uintptr
	xxConnect      uintptr
	xxBestIndex    uintptr
	xxDisconnect   uintptr
	xxDestroy      uintptr
	xxOpen         uintptr
	xxClose        uintptr
	xxFilter       uintptr
	xxNext         uintptr
	xxEof          uintptr
	xxColumn       uintptr
	xxRowid        uintptr
	xxUpdate       uintptr
	xxBegin        uintptr
	xxSync         uintptr
	xxCommit       uintptr
	xxRollback     uintptr
	xxFindFunction uintptr
	xxRename       uintptr
	xxSavepoint    uintptr
	xxRelease      uintptr
	xxRollbackTo   uintptr
	xxShadowName   uintptr
} /* sqlite3.h:6741:9 */

type xsqlite3_module = xsqlite3_module1 /* sqlite3.h:6744:31 */

// CAPI3REF: Virtual Table Indexing Information
// KEYWORDS: sqlite3_index_info
//
// The sqlite3_index_info structure and its substructures is used as part
// of the [virtual table] interface to
// pass information into and receive the reply from the [xBestIndex]
// method of a [virtual table module].  The fields under **Inputs** are the
// inputs to xBestIndex and are read-only.  xBestIndex inserts its
// results into the **Outputs** fields.
//
// ^(The aConstraint[] array records WHERE clause constraints of the form:
//
// <blockquote>column OP expr</blockquote>
//
// where OP is =, &lt;, &lt;=, &gt;, or &gt;=.)^  ^(The particular operator is
// stored in aConstraint[].op using one of the
// [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^
// ^(The index of the column is stored in
// aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the
// expr on the right-hand side can be evaluated (and thus the constraint
// is usable) and false if it cannot.)^
//
// ^The optimizer automatically inverts terms of the form "expr OP column"
// and makes other simplifications to the WHERE clause in an attempt to
// get as many WHERE clause terms into the form shown above as possible.
// ^The aConstraint[] array only reports WHERE clause terms that are
// relevant to the particular virtual table being queried.
//
// ^Information about the ORDER BY clause is stored in aOrderBy[].
// ^Each term of aOrderBy records a column of the ORDER BY clause.
//
// The colUsed field indicates which columns of the virtual table may be
// required by the current scan. Virtual table columns are numbered from
// zero in the order in which they appear within the CREATE TABLE statement
// passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62),
// the corresponding bit is set within the colUsed mask if the column may be
// required by SQLite. If the table has at least 64 columns and any column
// to the right of the first 63 is required, then bit 63 of colUsed is also
// set. In other words, column iCol may be required if the expression
// (colUsed & ((sqlite3_uint64)1 << (iCol>=63 ? 63 : iCol))) evaluates to
// non-zero.
//
// The [xBestIndex] method must fill aConstraintUsage[] with information
// about what parameters to pass to xFilter.  ^If argvIndex>0 then
// the right-hand side of the corresponding aConstraint[] is evaluated
// and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit
// is true, then the constraint is assumed to be fully handled by the
// virtual table and might not be checked again by the byte code.)^ ^(The
// aConstraintUsage[].omit flag is an optimization hint. When the omit flag
// is left in its default setting of false, the constraint will always be
// checked separately in byte code.  If the omit flag is change to true, then
// the constraint may or may not be checked in byte code.  In other words,
// when the omit flag is true there is no guarantee that the constraint will
// not be checked again using byte code.)^
//
// ^The idxNum and idxPtr values are recorded and passed into the
// [xFilter] method.
// ^[sqlite3_free()] is used to free idxPtr if and only if
// needToFreeIdxPtr is true.
//
// ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in
// the correct order to satisfy the ORDER BY clause so that no separate
// sorting step is required.
//
// ^The estimatedCost value is an estimate of the cost of a particular
// strategy. A cost of N indicates that the cost of the strategy is similar
// to a linear scan of an SQLite table with N rows. A cost of log(N)
// indicates that the expense of the operation is similar to that of a
// binary search on a unique indexed field of an SQLite table with N rows.
//
// ^The estimatedRows value is an estimate of the number of rows that
// will be returned by the strategy.
//
// The xBestIndex method may optionally populate the idxFlags field with a
// mask of SQLITE_INDEX_SCAN_* flags. Currently there is only one such flag -
// SQLITE_INDEX_SCAN_UNIQUE. If the xBestIndex method sets this flag, SQLite
// assumes that the strategy may visit at most one row.
//
// Additionally, if xBestIndex sets the SQLITE_INDEX_SCAN_UNIQUE flag, then
// SQLite also assumes that if a call to the xUpdate() method is made as
// part of the same statement to delete or update a virtual table row and the
// implementation returns SQLITE_CONSTRAINT, then there is no need to rollback
// any database changes. In other words, if the xUpdate() returns
// SQLITE_CONSTRAINT, the database contents must be exactly as they were
// before xUpdate was called. By contrast, if SQLITE_INDEX_SCAN_UNIQUE is not
// set and xUpdate returns SQLITE_CONSTRAINT, any database changes made by
// the xUpdate method are automatically rolled back by SQLite.
//
// IMPORTANT: The estimatedRows field was added to the sqlite3_index_info
// structure for SQLite [version 3.8.2] ([dateof:3.8.2]).
// If a virtual table extension is
// used with an SQLite version earlier than 3.8.2, the results of attempting
// to read or write the estimatedRows field are undefined (but are likely
// to include crashing the application). The estimatedRows field should
// therefore only be used if [sqlite3_libversion_number()] returns a
// value greater than or equal to 3008002. Similarly, the idxFlags field
// was added for [version 3.9.0] ([dateof:3.9.0]).
// It may therefore only be used if
// sqlite3_libversion_number() returns a value greater than or equal to
// 3009000.
type xsqlite3_index_constraint = struct {
	xiColumn     int32
	xop          uint8
	xusable      uint8
	_            [2]byte
	xiTermOffset int32
} /* sqlite3.h:6742:9 */

// CAPI3REF: Virtual Table Indexing Information
// KEYWORDS: sqlite3_index_info
//
// The sqlite3_index_info structure and its substructures is used as part
// of the [virtual table] interface to
// pass information into and receive the reply from the [xBestIndex]
// method of a [virtual table module].  The fields under **Inputs** are the
// inputs to xBestIndex and are read-only.  xBestIndex inserts its
// results into the **Outputs** fields.
//
// ^(The aConstraint[] array records WHERE clause constraints of the form:
//
// <blockquote>column OP expr</blockquote>
//
// where OP is =, &lt;, &lt;=, &gt;, or &gt;=.)^  ^(The particular operator is
// stored in aConstraint[].op using one of the
// [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^
// ^(The index of the column is stored in
// aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the
// expr on the right-hand side can be evaluated (and thus the constraint
// is usable) and false if it cannot.)^
//
// ^The optimizer automatically inverts terms of the form "expr OP column"
// and makes other simplifications to the WHERE clause in an attempt to
// get as many WHERE clause terms into the form shown above as possible.
// ^The aConstraint[] array only reports WHERE clause terms that are
// relevant to the particular virtual table being queried.
//
// ^Information about the ORDER BY clause is stored in aOrderBy[].
// ^Each term of aOrderBy records a column of the ORDER BY clause.
//
// The colUsed field indicates which columns of the virtual table may be
// required by the current scan. Virtual table columns are numbered from
// zero in the order in which they appear within the CREATE TABLE statement
// passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62),
// the corresponding bit is set within the colUsed mask if the column may be
// required by SQLite. If the table has at least 64 columns and any column
// to the right of the first 63 is required, then bit 63 of colUsed is also
// set. In other words, column iCol may be required if the expression
// (colUsed & ((sqlite3_uint64)1 << (iCol>=63 ? 63 : iCol))) evaluates to
// non-zero.
//
// The [xBestIndex] method must fill aConstraintUsage[] with information
// about what parameters to pass to xFilter.  ^If argvIndex>0 then
// the right-hand side of the corresponding aConstraint[] is evaluated
// and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit
// is true, then the constraint is assumed to be fully handled by the
// virtual table and might not be checked again by the byte code.)^ ^(The
// aConstraintUsage[].omit flag is an optimization hint. When the omit flag
// is left in its default setting of false, the constraint will always be
// checked separately in byte code.  If the omit flag is change to true, then
// the constraint may or may not be checked in byte code.  In other words,
// when the omit flag is true there is no guarantee that the constraint will
// not be checked again using byte code.)^
//
// ^The idxNum and idxPtr values are recorded and passed into the
// [xFilter] method.
// ^[sqlite3_free()] is used to free idxPtr if and only if
// needToFreeIdxPtr is true.
//
// ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in
// the correct order to satisfy the ORDER BY clause so that no separate
// sorting step is required.
//
// ^The estimatedCost value is an estimate of the cost of a particular
// strategy. A cost of N indicates that the cost of the strategy is similar
// to a linear scan of an SQLite table with N rows. A cost of log(N)
// indicates that the expense of the operation is similar to that of a
// binary search on a unique indexed field of an SQLite table with N rows.
//
// ^The estimatedRows value is an estimate of the number of rows that
// will be returned by the strategy.
//
// The xBestIndex method may optionally populate the idxFlags field with a
// mask of SQLITE_INDEX_SCAN_* flags. Currently there is only one such flag -
// SQLITE_INDEX_SCAN_UNIQUE. If the xBestIndex method sets this flag, SQLite
// assumes that the strategy may visit at most one row.
//
// Additionally, if xBestIndex sets the SQLITE_INDEX_SCAN_UNIQUE flag, then
// SQLite also assumes that if a call to the xUpdate() method is made as
// part of the same statement to delete or update a virtual table row and the
// implementation returns SQLITE_CONSTRAINT, then there is no need to rollback
// any database changes. In other words, if the xUpdate() returns
// SQLITE_CONSTRAINT, the database contents must be exactly as they were
// before xUpdate was called. By contrast, if SQLITE_INDEX_SCAN_UNIQUE is not
// set and xUpdate returns SQLITE_CONSTRAINT, any database changes made by
// the xUpdate method are automatically rolled back by SQLite.
//
// IMPORTANT: The estimatedRows field was added to the sqlite3_index_info
// structure for SQLite [version 3.8.2] ([dateof:3.8.2]).
// If a virtual table extension is
// used with an SQLite version earlier than 3.8.2, the results of attempting
// to read or write the estimatedRows field are undefined (but are likely
// to include crashing the application). The estimatedRows field should
// therefore only be used if [sqlite3_libversion_number()] returns a
// value greater than or equal to 3008002. Similarly, the idxFlags field
// was added for [version 3.9.0] ([dateof:3.9.0]).
// It may therefore only be used if
// sqlite3_libversion_number() returns a value greater than or equal to
// 3009000.
type xsqlite3_index_orderby = struct {
	xiColumn int32
	xdesc    uint8
	_        [3]byte
} /* sqlite3.h:6742:9 */

// CAPI3REF: Virtual Table Indexing Information
// KEYWORDS: sqlite3_index_info
//
// The sqlite3_index_info structure and its substructures is used as part
// of the [virtual table] interface to
// pass information into and receive the reply from the [xBestIndex]
// method of a [virtual table module].  The fields under **Inputs** are the
// inputs to xBestIndex and are read-only.  xBestIndex inserts its
// results into the **Outputs** fields.
//
// ^(The aConstraint[] array records WHERE clause constraints of the form:
//
// <blockquote>column OP expr</blockquote>
//
// where OP is =, &lt;, &lt;=, &gt;, or &gt;=.)^  ^(The particular operator is
// stored in aConstraint[].op using one of the
// [SQLITE_INDEX_CONSTRAINT_EQ | SQLITE_INDEX_CONSTRAINT_ values].)^
// ^(The index of the column is stored in
// aConstraint[].iColumn.)^  ^(aConstraint[].usable is TRUE if the
// expr on the right-hand side can be evaluated (and thus the constraint
// is usable) and false if it cannot.)^
//
// ^The optimizer automatically inverts terms of the form "expr OP column"
// and makes other simplifications to the WHERE clause in an attempt to
// get as many WHERE clause terms into the form shown above as possible.
// ^The aConstraint[] array only reports WHERE clause terms that are
// relevant to the particular virtual table being queried.
//
// ^Information about the ORDER BY clause is stored in aOrderBy[].
// ^Each term of aOrderBy records a column of the ORDER BY clause.
//
// The colUsed field indicates which columns of the virtual table may be
// required by the current scan. Virtual table columns are numbered from
// zero in the order in which they appear within the CREATE TABLE statement
// passed to sqlite3_declare_vtab(). For the first 63 columns (columns 0-62),
// the corresponding bit is set within the colUsed mask if the column may be
// required by SQLite. If the table has at least 64 columns and any column
// to the right of the first 63 is required, then bit 63 of colUsed is also
// set. In other words, column iCol may be required if the expression
// (colUsed & ((sqlite3_uint64)1 << (iCol>=63 ? 63 : iCol))) evaluates to
// non-zero.
//
// The [xBestIndex] method must fill aConstraintUsage[] with information
// about what parameters to pass to xFilter.  ^If argvIndex>0 then
// the right-hand side of the corresponding aConstraint[] is evaluated
// and becomes the argvIndex-th entry in argv.  ^(If aConstraintUsage[].omit
// is true, then the constraint is assumed to be fully handled by the
// virtual table and might not be checked again by the byte code.)^ ^(The
// aConstraintUsage[].omit flag is an optimization hint. When the omit flag
// is left in its default setting of false, the constraint will always be
// checked separately in byte code.  If the omit flag is change to true, then
// the constraint may or may not be checked in byte code.  In other words,
// when the omit flag is true there is no guarantee that the constraint will
// not be checked again using byte code.)^
//
// ^The idxNum and idxPtr values are recorded and passed into the
// [xFilter] method.
// ^[sqlite3_free()] is used to free idxPtr if and only if
// needToFreeIdxPtr is true.
//
// ^The orderByConsumed means that output from [xFilter]/[xNext] will occur in
// the correct order to satisfy the ORDER BY clause so that no separate
// sorting step is required.
//
// ^The estimatedCost value is an estimate of the cost of a particular
// strategy. A cost of N indicates that the cost of the strategy is similar
// to a linear scan of an SQLite table with N rows. A cost of log(N)
// indicates that the expense of the operation is similar to that of a
// binary search on a unique indexed field of an SQLite table with N rows.
//
// ^The estimatedRows value is an estimate of the number of rows that
// will be returned by the strategy.
//
// The xBestIndex method may optionally populate the idxFlags field with a
// mask of SQLITE_INDEX_SCAN_* flags. Currently there is only one such flag -
// SQLITE_INDEX_SCAN_UNIQUE. If the xBestIndex method sets this flag, SQLite
// assumes that the strategy may visit at most one row.
//
// Additionally, if xBestIndex sets the SQLITE_INDEX_SCAN_UNIQUE flag, then
// SQLite also assumes that if a call to the xUpdate() method is made as
// part of the same statement to delete or update a virtual table row and the
// implementation returns SQLITE_CONSTRAINT, then there is no need to rollback
// any database changes. In other words, if the xUpdate() returns
// SQLITE_CONSTRAINT, the database contents must be exactly as they were
// before xUpdate was called. By contrast, if SQLITE_INDEX_SCAN_UNIQUE is not
// set and xUpdate returns SQLITE_CONSTRAINT, any database changes made by
// the xUpdate method are automatically rolled back by SQLite.
//
// IMPORTANT: The estimatedRows field was added to the sqlite3_index_info
// structure for SQLite [version 3.8.2] ([dateof:3.8.2]).
// If a virtual table extension is
// used with an SQLite version earlier than 3.8.2, the results of attempting
// to read or write the estimatedRows field are undefined (but are likely
// to include crashing the application). The estimatedRows field should
// therefore only be used if [sqlite3_libversion_number()] returns a
// value greater than or equal to 3008002. Similarly, the idxFlags field
// was added for [version 3.9.0] ([dateof:3.9.0]).
// It may therefore only be used if
// sqlite3_libversion_number() returns a value greater than or equal to
// 3009000.
type xsqlite3_index_constraint_usage = struct {
	xargvIndex int32
	xomit      uint8
	_          [3]byte
} /* sqlite3.h:6742:9 */

// CAPI3REF: Mutex Methods Object
//
// An instance of this structure defines the low-level routines
// used to allocate and use mutexes.
//
// Usually, the default mutex implementations provided by SQLite are
// sufficient, however the application has the option of substituting a custom
// implementation for specialized deployments or systems for which SQLite
// does not provide a suitable implementation. In this case, the application
// creates and populates an instance of this structure to pass
// to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option.
// Additionally, an instance of this structure can be used as an
// output variable when querying the system for the current mutex
// implementation, using the [SQLITE_CONFIG_GETMUTEX] option.
//
// ^The xMutexInit method defined by this structure is invoked as
// part of system initialization by the sqlite3_initialize() function.
// ^The xMutexInit routine is called by SQLite exactly once for each
// effective call to [sqlite3_initialize()].
//
// ^The xMutexEnd method defined by this structure is invoked as
// part of system shutdown by the sqlite3_shutdown() function. The
// implementation of this method is expected to release all outstanding
// resources obtained by the mutex methods implementation, especially
// those obtained by the xMutexInit method.  ^The xMutexEnd()
// interface is invoked exactly once for each call to [sqlite3_shutdown()].
//
// ^(The remaining seven methods defined by this structure (xMutexAlloc,
// xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and
// xMutexNotheld) implement the following interfaces (respectively):
//
// <ul>
//   <li>  [sqlite3_mutex_alloc()] </li>
//   <li>  [sqlite3_mutex_free()] </li>
//   <li>  [sqlite3_mutex_enter()] </li>
//   <li>  [sqlite3_mutex_try()] </li>
//   <li>  [sqlite3_mutex_leave()] </li>
//   <li>  [sqlite3_mutex_held()] </li>
//   <li>  [sqlite3_mutex_notheld()] </li>
// </ul>)^
//
// The only difference is that the public sqlite3_XXX functions enumerated
// above silently ignore any invocations that pass a NULL pointer instead
// of a valid mutex handle. The implementations of the methods defined
// by this structure are not required to handle this case. The results
// of passing a NULL pointer instead of a valid mutex handle are undefined
// (i.e. it is acceptable to provide an implementation that segfaults if
// it is passed a NULL pointer).
//
// The xMutexInit() method must be threadsafe.  It must be harmless to
// invoke xMutexInit() multiple times within the same process and without
// intervening calls to xMutexEnd().  Second and subsequent calls to
// xMutexInit() must be no-ops.
//
// xMutexInit() must not use SQLite memory allocation ([sqlite3_malloc()]
// and its associates).  Similarly, xMutexAlloc() must not use SQLite memory
// allocation for a static mutex.  ^However xMutexAlloc() may use SQLite
// memory allocation for a fast or recursive mutex.
//
// ^SQLite will invoke the xMutexEnd() method when [sqlite3_shutdown()] is
// called, but only if the prior call to xMutexInit returned SQLITE_OK.
// If xMutexInit fails in any way, it is expected to clean up after itself
// prior to returning.
type xsqlite3_mutex_methods1 = struct {
	xxMutexInit    uintptr
	xxMutexEnd     uintptr
	xxMutexAlloc   uintptr
	xxMutexFree    uintptr
	xxMutexEnter   uintptr
	xxMutexTry     uintptr
	xxMutexLeave   uintptr
	xxMutexHeld    uintptr
	xxMutexNotheld uintptr
} /* sqlite3.h:7576:9 */

// CAPI3REF: Mutex Methods Object
//
// An instance of this structure defines the low-level routines
// used to allocate and use mutexes.
//
// Usually, the default mutex implementations provided by SQLite are
// sufficient, however the application has the option of substituting a custom
// implementation for specialized deployments or systems for which SQLite
// does not provide a suitable implementation. In this case, the application
// creates and populates an instance of this structure to pass
// to sqlite3_config() along with the [SQLITE_CONFIG_MUTEX] option.
// Additionally, an instance of this structure can be used as an
// output variable when querying the system for the current mutex
// implementation, using the [SQLITE_CONFIG_GETMUTEX] option.
//
// ^The xMutexInit method defined by this structure is invoked as
// part of system initialization by the sqlite3_initialize() function.
// ^The xMutexInit routine is called by SQLite exactly once for each
// effective call to [sqlite3_initialize()].
//
// ^The xMutexEnd method defined by this structure is invoked as
// part of system shutdown by the sqlite3_shutdown() function. The
// implementation of this method is expected to release all outstanding
// resources obtained by the mutex methods implementation, especially
// those obtained by the xMutexInit method.  ^The xMutexEnd()
// interface is invoked exactly once for each call to [sqlite3_shutdown()].
//
// ^(The remaining seven methods defined by this structure (xMutexAlloc,
// xMutexFree, xMutexEnter, xMutexTry, xMutexLeave, xMutexHeld and
// xMutexNotheld) implement the following interfaces (respectively):
//
// <ul>
//   <li>  [sqlite3_mutex_alloc()] </li>
//   <li>  [sqlite3_mutex_free()] </li>
//   <li>  [sqlite3_mutex_enter()] </li>
//   <li>  [sqlite3_mutex_try()] </li>
//   <li>  [sqlite3_mutex_leave()] </li>
//   <li>  [sqlite3_mutex_held()] </li>
//   <li>  [sqlite3_mutex_notheld()] </li>
// </ul>)^
//
// The only difference is that the public sqlite3_XXX functions enumerated
// above silently ignore any invocations that pass a NULL pointer instead
// of a valid mutex handle. The implementations of the methods defined
// by this structure are not required to handle this case. The results
// of passing a NULL pointer instead of a valid mutex handle are undefined
// (i.e. it is acceptable to provide an implementation that segfaults if
// it is passed a NULL pointer).
//
// The xMutexInit() method must be threadsafe.  It must be harmless to
// invoke xMutexInit() multiple times within the same process and without
// intervening calls to xMutexEnd().  Second and subsequent calls to
// xMutexInit() must be no-ops.
//
// xMutexInit() must not use SQLite memory allocation ([sqlite3_malloc()]
// and its associates).  Similarly, xMutexAlloc() must not use SQLite memory
// allocation for a static mutex.  ^However xMutexAlloc() may use SQLite
// memory allocation for a fast or recursive mutex.
//
// ^SQLite will invoke the xMutexEnd() method when [sqlite3_shutdown()] is
// called, but only if the prior call to xMutexInit returned SQLITE_OK.
// If xMutexInit fails in any way, it is expected to clean up after itself
// prior to returning.
type xsqlite3_mutex_methods = xsqlite3_mutex_methods1 /* sqlite3.h:7576:38 */

// CAPI3REF: Custom Page Cache Object
//
// The sqlite3_pcache_page object represents a single page in the
// page cache.  The page cache will allocate instances of this
// object.  Various methods of the page cache use pointers to instances
// of this object as parameters or as their return value.
//
// See [sqlite3_pcache_methods2] for additional information.
type xsqlite3_pcache_page1 = struct {
	xpBuf   uintptr
	xpExtra uintptr
} /* sqlite3.h:8330:9 */

// CAPI3REF: Custom Page Cache Object
//
// The sqlite3_pcache_page object represents a single page in the
// page cache.  The page cache will allocate instances of this
// object.  Various methods of the page cache use pointers to instances
// of this object as parameters or as their return value.
//
// See [sqlite3_pcache_methods2] for additional information.
type xsqlite3_pcache_page = xsqlite3_pcache_page1 /* sqlite3.h:8330:36 */

// CAPI3REF: Application Defined Page Cache.
// KEYWORDS: {page cache}
//
// ^(The [sqlite3_config]([SQLITE_CONFIG_PCACHE2], ...) interface can
// register an alternative page cache implementation by passing in an
// instance of the sqlite3_pcache_methods2 structure.)^
// In many applications, most of the heap memory allocated by
// SQLite is used for the page cache.
// By implementing a
// custom page cache using this API, an application can better control
// the amount of memory consumed by SQLite, the way in which
// that memory is allocated and released, and the policies used to
// determine exactly which parts of a database file are cached and for
// how long.
//
// The alternative page cache mechanism is an
// extreme measure that is only needed by the most demanding applications.
// The built-in page cache is recommended for most uses.
//
// ^(The contents of the sqlite3_pcache_methods2 structure are copied to an
// internal buffer by SQLite within the call to [sqlite3_config].  Hence
// the application may discard the parameter after the call to
// [sqlite3_config()] returns.)^
//
// [[the xInit() page cache method]]
// ^(The xInit() method is called once for each effective
// call to [sqlite3_initialize()])^
// (usually only once during the lifetime of the process). ^(The xInit()
// method is passed a copy of the sqlite3_pcache_methods2.pArg value.)^
// The intent of the xInit() method is to set up global data structures
// required by the custom page cache implementation.
// ^(If the xInit() method is NULL, then the
// built-in default page cache is used instead of the application defined
// page cache.)^
//
// [[the xShutdown() page cache method]]
// ^The xShutdown() method is called by [sqlite3_shutdown()].
// It can be used to clean up
// any outstanding resources before process shutdown, if required.
// ^The xShutdown() method may be NULL.
//
// ^SQLite automatically serializes calls to the xInit method,
// so the xInit method need not be threadsafe.  ^The
// xShutdown method is only called from [sqlite3_shutdown()] so it does
// not need to be threadsafe either.  All other methods must be threadsafe
// in multithreaded applications.
//
// ^SQLite will never invoke xInit() more than once without an intervening
// call to xShutdown().
//
// [[the xCreate() page cache methods]]
// ^SQLite invokes the xCreate() method to construct a new cache instance.
// SQLite will typically create one cache instance for each open database file,
// though this is not guaranteed. ^The
// first parameter, szPage, is the size in bytes of the pages that must
// be allocated by the cache.  ^szPage will always a power of two.  ^The
// second parameter szExtra is a number of bytes of extra storage
// associated with each page cache entry.  ^The szExtra parameter will
// a number less than 250.  SQLite will use the
// extra szExtra bytes on each page to store metadata about the underlying
// database page on disk.  The value passed into szExtra depends
// on the SQLite version, the target platform, and how SQLite was compiled.
// ^The third argument to xCreate(), bPurgeable, is true if the cache being
// created will be used to cache database pages of a file stored on disk, or
// false if it is used for an in-memory database. The cache implementation
// does not have to do anything special based with the value of bPurgeable;
// it is purely advisory.  ^On a cache where bPurgeable is false, SQLite will
// never invoke xUnpin() except to deliberately delete a page.
// ^In other words, calls to xUnpin() on a cache with bPurgeable set to
// false will always have the "discard" flag set to true.
// ^Hence, a cache created with bPurgeable false will
// never contain any unpinned pages.
//
// [[the xCachesize() page cache method]]
// ^(The xCachesize() method may be called at any time by SQLite to set the
// suggested maximum cache-size (number of pages stored by) the cache
// instance passed as the first argument. This is the value configured using
// the SQLite "[PRAGMA cache_size]" command.)^  As with the bPurgeable
// parameter, the implementation is not required to do anything with this
// value; it is advisory only.
//
// [[the xPagecount() page cache methods]]
// The xPagecount() method must return the number of pages currently
// stored in the cache, both pinned and unpinned.
//
// [[the xFetch() page cache methods]]
// The xFetch() method locates a page in the cache and returns a pointer to
// an sqlite3_pcache_page object associated with that page, or a NULL pointer.
// The pBuf element of the returned sqlite3_pcache_page object will be a
// pointer to a buffer of szPage bytes used to store the content of a
// single database page.  The pExtra element of sqlite3_pcache_page will be
// a pointer to the szExtra bytes of extra storage that SQLite has requested
// for each entry in the page cache.
//
// The page to be fetched is determined by the key. ^The minimum key value
// is 1.  After it has been retrieved using xFetch, the page is considered
// to be "pinned".
//
// If the requested page is already in the page cache, then the page cache
// implementation must return a pointer to the page buffer with its content
// intact.  If the requested page is not already in the cache, then the
// cache implementation should use the value of the createFlag
// parameter to help it determined what action to take:
//
// <table border=1 width=85% align=center>
// <tr><th> createFlag <th> Behavior when page is not already in cache
// <tr><td> 0 <td> Do not allocate a new page.  Return NULL.
// <tr><td> 1 <td> Allocate a new page if it easy and convenient to do so.
//                 Otherwise return NULL.
// <tr><td> 2 <td> Make every effort to allocate a new page.  Only return
//                 NULL if allocating a new page is effectively impossible.
// </table>
//
// ^(SQLite will normally invoke xFetch() with a createFlag of 0 or 1.  SQLite
// will only use a createFlag of 2 after a prior call with a createFlag of 1
// failed.)^  In between the xFetch() calls, SQLite may
// attempt to unpin one or more cache pages by spilling the content of
// pinned pages to disk and synching the operating system disk cache.
//
// [[the xUnpin() page cache method]]
// ^xUnpin() is called by SQLite with a pointer to a currently pinned page
// as its second argument.  If the third parameter, discard, is non-zero,
// then the page must be evicted from the cache.
// ^If the discard parameter is
// zero, then the page may be discarded or retained at the discretion of
// page cache implementation. ^The page cache implementation
// may choose to evict unpinned pages at any time.
//
// The cache must not perform any reference counting. A single
// call to xUnpin() unpins the page regardless of the number of prior calls
// to xFetch().
//
// [[the xRekey() page cache methods]]
// The xRekey() method is used to change the key value associated with the
// page passed as the second argument. If the cache
// previously contains an entry associated with newKey, it must be
// discarded. ^Any prior cache entry associated with newKey is guaranteed not
// to be pinned.
//
// When SQLite calls the xTruncate() method, the cache must discard all
// existing cache entries with page numbers (keys) greater than or equal
// to the value of the iLimit parameter passed to xTruncate(). If any
// of these pages are pinned, they are implicitly unpinned, meaning that
// they can be safely discarded.
//
// [[the xDestroy() page cache method]]
// ^The xDestroy() method is used to delete a cache allocated by xCreate().
// All resources associated with the specified cache should be freed. ^After
// calling the xDestroy() method, SQLite considers the [sqlite3_pcache*]
// handle invalid, and will not use it with any other sqlite3_pcache_methods2
// functions.
//
// [[the xShrink() page cache method]]
// ^SQLite invokes the xShrink() method when it wants the page cache to
// free up as much of heap memory as possible.  The page cache implementation
// is not obligated to free any memory, but well-behaved implementations should
// do their best.
type xsqlite3_pcache_methods21 = struct {
	xiVersion   int32
	_           [4]byte
	xpArg       uintptr
	xxInit      uintptr
	xxShutdown  uintptr
	xxCreate    uintptr
	xxCachesize uintptr
	xxPagecount uintptr
	xxFetch     uintptr
	xxUnpin     uintptr
	xxRekey     uintptr
	xxTruncate  uintptr
	xxDestroy   uintptr
	xxShrink    uintptr
} /* sqlite3.h:8495:9 */

// CAPI3REF: Application Defined Page Cache.
// KEYWORDS: {page cache}
//
// ^(The [sqlite3_config]([SQLITE_CONFIG_PCACHE2], ...) interface can
// register an alternative page cache implementation by passing in an
// instance of the sqlite3_pcache_methods2 structure.)^
// In many applications, most of the heap memory allocated by
// SQLite is used for the page cache.
// By implementing a
// custom page cache using this API, an application can better control
// the amount of memory consumed by SQLite, the way in which
// that memory is allocated and released, and the policies used to
// determine exactly which parts of a database file are cached and for
// how long.
//
// The alternative page cache mechanism is an
// extreme measure that is only needed by the most demanding applications.
// The built-in page cache is recommended for most uses.
//
// ^(The contents of the sqlite3_pcache_methods2 structure are copied to an
// internal buffer by SQLite within the call to [sqlite3_config].  Hence
// the application may discard the parameter after the call to
// [sqlite3_config()] returns.)^
//
// [[the xInit() page cache method]]
// ^(The xInit() method is called once for each effective
// call to [sqlite3_initialize()])^
// (usually only once during the lifetime of the process). ^(The xInit()
// method is passed a copy of the sqlite3_pcache_methods2.pArg value.)^
// The intent of the xInit() method is to set up global data structures
// required by the custom page cache implementation.
// ^(If the xInit() method is NULL, then the
// built-in default page cache is used instead of the application defined
// page cache.)^
//
// [[the xShutdown() page cache method]]
// ^The xShutdown() method is called by [sqlite3_shutdown()].
// It can be used to clean up
// any outstanding resources before process shutdown, if required.
// ^The xShutdown() method may be NULL.
//
// ^SQLite automatically serializes calls to the xInit method,
// so the xInit method need not be threadsafe.  ^The
// xShutdown method is only called from [sqlite3_shutdown()] so it does
// not need to be threadsafe either.  All other methods must be threadsafe
// in multithreaded applications.
//
// ^SQLite will never invoke xInit() more than once without an intervening
// call to xShutdown().
//
// [[the xCreate() page cache methods]]
// ^SQLite invokes the xCreate() method to construct a new cache instance.
// SQLite will typically create one cache instance for each open database file,
// though this is not guaranteed. ^The
// first parameter, szPage, is the size in bytes of the pages that must
// be allocated by the cache.  ^szPage will always a power of two.  ^The
// second parameter szExtra is a number of bytes of extra storage
// associated with each page cache entry.  ^The szExtra parameter will
// a number less than 250.  SQLite will use the
// extra szExtra bytes on each page to store metadata about the underlying
// database page on disk.  The value passed into szExtra depends
// on the SQLite version, the target platform, and how SQLite was compiled.
// ^The third argument to xCreate(), bPurgeable, is true if the cache being
// created will be used to cache database pages of a file stored on disk, or
// false if it is used for an in-memory database. The cache implementation
// does not have to do anything special based with the value of bPurgeable;
// it is purely advisory.  ^On a cache where bPurgeable is false, SQLite will
// never invoke xUnpin() except to deliberately delete a page.
// ^In other words, calls to xUnpin() on a cache with bPurgeable set to
// false will always have the "discard" flag set to true.
// ^Hence, a cache created with bPurgeable false will
// never contain any unpinned pages.
//
// [[the xCachesize() page cache method]]
// ^(The xCachesize() method may be called at any time by SQLite to set the
// suggested maximum cache-size (number of pages stored by) the cache
// instance passed as the first argument. This is the value configured using
// the SQLite "[PRAGMA cache_size]" command.)^  As with the bPurgeable
// parameter, the implementation is not required to do anything with this
// value; it is advisory only.
//
// [[the xPagecount() page cache methods]]
// The xPagecount() method must return the number of pages currently
// stored in the cache, both pinned and unpinned.
//
// [[the xFetch() page cache methods]]
// The xFetch() method locates a page in the cache and returns a pointer to
// an sqlite3_pcache_page object associated with that page, or a NULL pointer.
// The pBuf element of the returned sqlite3_pcache_page object will be a
// pointer to a buffer of szPage bytes used to store the content of a
// single database page.  The pExtra element of sqlite3_pcache_page will be
// a pointer to the szExtra bytes of extra storage that SQLite has requested
// for each entry in the page cache.
//
// The page to be fetched is determined by the key. ^The minimum key value
// is 1.  After it has been retrieved using xFetch, the page is considered
// to be "pinned".
//
// If the requested page is already in the page cache, then the page cache
// implementation must return a pointer to the page buffer with its content
// intact.  If the requested page is not already in the cache, then the
// cache implementation should use the value of the createFlag
// parameter to help it determined what action to take:
//
// <table border=1 width=85% align=center>
// <tr><th> createFlag <th> Behavior when page is not already in cache
// <tr><td> 0 <td> Do not allocate a new page.  Return NULL.
// <tr><td> 1 <td> Allocate a new page if it easy and convenient to do so.
//                 Otherwise return NULL.
// <tr><td> 2 <td> Make every effort to allocate a new page.  Only return
//                 NULL if allocating a new page is effectively impossible.
// </table>
//
// ^(SQLite will normally invoke xFetch() with a createFlag of 0 or 1.  SQLite
// will only use a createFlag of 2 after a prior call with a createFlag of 1
// failed.)^  In between the xFetch() calls, SQLite may
// attempt to unpin one or more cache pages by spilling the content of
// pinned pages to disk and synching the operating system disk cache.
//
// [[the xUnpin() page cache method]]
// ^xUnpin() is called by SQLite with a pointer to a currently pinned page
// as its second argument.  If the third parameter, discard, is non-zero,
// then the page must be evicted from the cache.
// ^If the discard parameter is
// zero, then the page may be discarded or retained at the discretion of
// page cache implementation. ^The page cache implementation
// may choose to evict unpinned pages at any time.
//
// The cache must not perform any reference counting. A single
// call to xUnpin() unpins the page regardless of the number of prior calls
// to xFetch().
//
// [[the xRekey() page cache methods]]
// The xRekey() method is used to change the key value associated with the
// page passed as the second argument. If the cache
// previously contains an entry associated with newKey, it must be
// discarded. ^Any prior cache entry associated with newKey is guaranteed not
// to be pinned.
//
// When SQLite calls the xTruncate() method, the cache must discard all
// existing cache entries with page numbers (keys) greater than or equal
// to the value of the iLimit parameter passed to xTruncate(). If any
// of these pages are pinned, they are implicitly unpinned, meaning that
// they can be safely discarded.
//
// [[the xDestroy() page cache method]]
// ^The xDestroy() method is used to delete a cache allocated by xCreate().
// All resources associated with the specified cache should be freed. ^After
// calling the xDestroy() method, SQLite considers the [sqlite3_pcache*]
// handle invalid, and will not use it with any other sqlite3_pcache_methods2
// functions.
//
// [[the xShrink() page cache method]]
// ^SQLite invokes the xShrink() method when it wants the page cache to
// free up as much of heap memory as possible.  The page cache implementation
// is not obligated to free any memory, but well-behaved implementations should
// do their best.
type xsqlite3_pcache_methods2 = xsqlite3_pcache_methods21 /* sqlite3.h:8495:40 */

// This is the obsolete pcache_methods object that has now been replaced
// by sqlite3_pcache_methods2.  This object is not used by SQLite.  It is
// retained in the header file for backwards compatibility only.
type xsqlite3_pcache_methods1 = struct {
	xpArg       uintptr
	xxInit      uintptr
	xxShutdown  uintptr
	xxCreate    uintptr
	xxCachesize uintptr
	xxPagecount uintptr
	xxFetch     uintptr
	xxUnpin     uintptr
	xxRekey     uintptr
	xxTruncate  uintptr
	xxDestroy   uintptr
} /* sqlite3.h:8518:9 */

// This is the obsolete pcache_methods object that has now been replaced
// by sqlite3_pcache_methods2.  This object is not used by SQLite.  It is
// retained in the header file for backwards compatibility only.
type xsqlite3_pcache_methods = xsqlite3_pcache_methods1 /* sqlite3.h:8518:39 */

// CAPI3REF: Database Snapshot
// KEYWORDS: {snapshot} {sqlite3_snapshot}
//
// An instance of the snapshot object records the state of a [WAL mode]
// database for some specific point in history.
//
// In [WAL mode], multiple [database connections] that are open on the
// same database file can each be reading a different historical version
// of the database file.  When a [database connection] begins a read
// transaction, that connection sees an unchanging copy of the database
// as it existed for the point in time when the transaction first started.
// Subsequent changes to the database from other connections are not seen
// by the reader until a new read transaction is started.
//
// The sqlite3_snapshot object records state information about an historical
// version of the database file so that it is possible to later open a new read
// transaction that sees that historical version of the database rather than
// the most recent version.
type xsqlite3_snapshot1 = struct{ xhidden [48]uint8 } /* sqlite3.h:9575:9 */

// CAPI3REF: Database Snapshot
// KEYWORDS: {snapshot} {sqlite3_snapshot}
//
// An instance of the snapshot object records the state of a [WAL mode]
// database for some specific point in history.
//
// In [WAL mode], multiple [database connections] that are open on the
// same database file can each be reading a different historical version
// of the database file.  When a [database connection] begins a read
// transaction, that connection sees an unchanging copy of the database
// as it existed for the point in time when the transaction first started.
// Subsequent changes to the database from other connections are not seen
// by the reader until a new read transaction is started.
//
// The sqlite3_snapshot object records state information about an historical
// version of the database file so that it is possible to later open a new read
// transaction that sees that historical version of the database rather than
// the most recent version.
type xsqlite3_snapshot = xsqlite3_snapshot1 /* sqlite3.h:9577:3 */

// CAPI3REF: Flags for sqlite3_deserialize()
//
// The following are allowed values for 6th argument (the F argument) to
// the [sqlite3_deserialize(D,S,P,N,M,F)] interface.
//
// The SQLITE_DESERIALIZE_FREEONCLOSE means that the database serialization
// in the P argument is held in memory obtained from [sqlite3_malloc64()]
// and that SQLite should take ownership of this memory and automatically
// free it when it has finished using it.  Without this flag, the caller
// is responsible for freeing any dynamically allocated memory.
//
// The SQLITE_DESERIALIZE_RESIZEABLE flag means that SQLite is allowed to
// grow the size of the database using calls to [sqlite3_realloc64()].  This
// flag should only be used if SQLITE_DESERIALIZE_FREEONCLOSE is also used.
// Without this flag, the deserialized database cannot increase in size beyond
// the number of bytes specified by the M parameter.
//
// The SQLITE_DESERIALIZE_READONLY flag means that the deserialized database
// should be treated as read-only.

// Undo the hack that converts floating point types to integer for
// builds on processors without floating point support.

//******* Begin file sqlite3rtree.h ********
// 2010 August 30
//
// The author disclaims copyright to this source code.  In place of
// a legal notice, here is a blessing:
//
//    May you do good and not evil.
//    May you find forgiveness for yourself and forgive others.
//    May you share freely, never taking more than you give.
//
//

type xsqlite3_rtree_geometry1 = struct {
	xpContext uintptr
	xnParam   int32
	_         [4]byte
	xaParam   uintptr
	xpUser    uintptr
	xxDelUser uintptr
} /* sqlite3.h:9902:9 */

// CAPI3REF: Flags for sqlite3_deserialize()
//
// The following are allowed values for 6th argument (the F argument) to
// the [sqlite3_deserialize(D,S,P,N,M,F)] interface.
//
// The SQLITE_DESERIALIZE_FREEONCLOSE means that the database serialization
// in the P argument is held in memory obtained from [sqlite3_malloc64()]
// and that SQLite should take ownership of this memory and automatically
// free it when it has finished using it.  Without this flag, the caller
// is responsible for freeing any dynamically allocated memory.
//
// The SQLITE_DESERIALIZE_RESIZEABLE flag means that SQLite is allowed to
// grow the size of the database using calls to [sqlite3_realloc64()].  This
// flag should only be used if SQLITE_DESERIALIZE_FREEONCLOSE is also used.
// Without this flag, the deserialized database cannot increase in size beyond
// the number of bytes specified by the M parameter.
//
// The SQLITE_DESERIALIZE_READONLY flag means that the deserialized database
// should be treated as read-only.

// Undo the hack that converts floating point types to integer for
// builds on processors without floating point support.

//******* Begin file sqlite3rtree.h ********
// 2010 August 30
//
// The author disclaims copyright to this source code.  In place of
// a legal notice, here is a blessing:
//
//    May you do good and not evil.
//    May you find forgiveness for yourself and forgive others.
//    May you share freely, never taking more than you give.
//
//

type xsqlite3_rtree_geometry = xsqlite3_rtree_geometry1 /* sqlite3.h:9902:39 */
type xsqlite3_rtree_query_info1 = struct {
	xpContext      uintptr
	xnParam        int32
	_              [4]byte
	xaParam        uintptr
	xpUser         uintptr
	xxDelUser      uintptr
	xaCoord        uintptr
	xanQueue       uintptr
	xnCoord        int32
	xiLevel        int32
	xmxLevel       int32
	_              [4]byte
	xiRowid        xsqlite3_int64
	xrParentScore  xsqlite3_rtree_dbl
	xeParentWithin int32
	xeWithin       int32
	xrScore        xsqlite3_rtree_dbl
	xapSqlParam    uintptr
} /* sqlite3.h:9903:9 */

type xsqlite3_rtree_query_info = xsqlite3_rtree_query_info1 /* sqlite3.h:9903:41 */

// The double-precision datatype used by RTree depends on the
// SQLITE_RTREE_INT_ONLY compile-time option.
type xsqlite3_rtree_dbl = float64 /* sqlite3.h:9911:18 */

// Allowed values for sqlite3_rtree_query.eWithin and .eParentWithin.

//******* End of sqlite3rtree.h ********
//******* Begin file sqlite3session.h ********

//******* End of sqlite3session.h ********
//******* Begin file fts5.h ********
// 2014 May 31
//
// The author disclaims copyright to this source code.  In place of
// a legal notice, here is a blessing:
//
//    May you do good and not evil.
//    May you find forgiveness for yourself and forgive others.
//    May you share freely, never taking more than you give.
//
//
//
// Interfaces to extend FTS5. Using the interfaces defined in this file,
// FTS5 may be extended with:
//
//     * custom tokenizers, and
//     * custom auxiliary functions.

// ************************************************************************
//
// CUSTOM AUXILIARY FUNCTIONS
//
// Virtual table implementations may overload SQL functions by implementing
// the sqlite3_module.xFindFunction() method.

type xFts5ExtensionApi1 = struct {
	xiVersion           int32
	_                   [4]byte
	xxUserData          uintptr
	xxColumnCount       uintptr
	xxRowCount          uintptr
	xxColumnTotalSize   uintptr
	xxTokenize          uintptr
	xxPhraseCount       uintptr
	xxPhraseSize        uintptr
	xxInstCount         uintptr
	xxInst              uintptr
	xxRowid             uintptr
	xxColumnText        uintptr
	xxColumnSize        uintptr
	xxQueryPhrase       uintptr
	xxSetAuxdata        uintptr
	xxGetAuxdata        uintptr
	xxPhraseFirst       uintptr
	xxPhraseNext        uintptr
	xxPhraseFirstColumn uintptr
	xxPhraseNextColumn  uintptr
} /* sqlite3.h:11697:9 */

// Allowed values for sqlite3_rtree_query.eWithin and .eParentWithin.

//******* End of sqlite3rtree.h ********
//******* Begin file sqlite3session.h ********

//******* End of sqlite3session.h ********
//******* Begin file fts5.h ********
// 2014 May 31
//
// The author disclaims copyright to this source code.  In place of
// a legal notice, here is a blessing:
//
//    May you do good and not evil.
//    May you find forgiveness for yourself and forgive others.
//    May you share freely, never taking more than you give.
//
//
//
// Interfaces to extend FTS5. Using the interfaces defined in this file,
// FTS5 may be extended with:
//
//     * custom tokenizers, and
//     * custom auxiliary functions.

// ************************************************************************
//
// CUSTOM AUXILIARY FUNCTIONS
//
// Virtual table implementations may overload SQL functions by implementing
// the sqlite3_module.xFindFunction() method.

type xFts5ExtensionApi = xFts5ExtensionApi1 /* sqlite3.h:11697:33 */
type xFts5PhraseIter1 = struct {
	xa uintptr
	xb uintptr
} /* sqlite3.h:11699:9 */

type xFts5PhraseIter = xFts5PhraseIter1 /* sqlite3.h:11699:31 */

type xfts5_extension_function = uintptr /* sqlite3.h:11701:14 */
type xfts5_tokenizer1 = struct {
	xxCreate   uintptr
	xxDelete   uintptr
	xxTokenize uintptr
} /* sqlite3.h:12160:9 */

type xfts5_tokenizer = xfts5_tokenizer1 /* sqlite3.h:12160:31 */

// Flags that may be passed as the third argument to xTokenize()

// Flags that may be passed by the tokenizer implementation back to FTS5
// as the third argument to the supplied xToken callback.

//
// END OF CUSTOM TOKENIZERS
//

// ************************************************************************
//
// FTS5 EXTENSION REGISTRATION API
type xfts5_api1 = struct {
	xiVersion         int32
	_                 [4]byte
	xxCreateTokenizer uintptr
	xxFindTokenizer   uintptr
	xxCreateFunction  uintptr
} /* sqlite3.h:12196:9 */

// Flags that may be passed as the third argument to xTokenize()

// Flags that may be passed by the tokenizer implementation back to FTS5
// as the third argument to the supplied xToken callback.

//
// END OF CUSTOM TOKENIZERS
//

// ************************************************************************
//
// FTS5 EXTENSION REGISTRATION API
type xfts5_api = xfts5_api1 /* sqlite3.h:12196:25 */

// POSIX.1-2008 extended locale interface (see locale.h).
// Definition of locale_t.
//    Copyright (C) 2017-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// Definition of struct __locale_struct and __locale_t.
//    Copyright (C) 1997-2020 Free Software Foundation, Inc.
//    This file is part of the GNU C Library.
//    Contributed by Ulrich Drepper <drepper@cygnus.com>, 1997.
//
//    The GNU C Library is free software; you can redistribute it and/or
//    modify it under the terms of the GNU Lesser General Public
//    License as published by the Free Software Foundation; either
//    version 2.1 of the License, or (at your option) any later version.
//
//    The GNU C Library is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//    Lesser General Public License for more details.
//
//    You should have received a copy of the GNU Lesser General Public
//    License along with the GNU C Library; if not, see
//    <https://www.gnu.org/licenses/>.

// POSIX.1-2008: the locale_t type, representing a locale context
//    (implementation-namespace version).  This type should be treated
//    as opaque by applications; some details are exposed for the sake of
//    efficiency in e.g. ctype functions.

type x__locale_struct = struct {
	x__locales       [13]uintptr
	x__ctype_b       uintptr
	x__ctype_tolower uintptr
	x__ctype_toupper uintptr
	x__names         [13]uintptr
} /* __locale_t.h:28:1 */

type x__locale_t = uintptr /* __locale_t.h:42:32 */

type xlocale_t = x__locale_t /* locale_t.h:24:20 */

func xprepareReading1(tls *libc.TLS, filename uintptr, n int32) uintptr { /* bench.c:6:8: */
	bp := tls.Alloc(48)
	defer tls.Free(48)

	// var DB uintptr at bp+24, 8

	var exit int32 = 0
	// var messaggeError uintptr at bp+32, 8

	// var stm uintptr at bp+40, 8

	sqlite3.Xsqlite3_config(tls, 17, libc.VaList(bp, 1))
	exit = sqlite3.Xsqlite3_open(tls, filename, bp+24 /* &DB */)
	if exit != 0 {
		libc.Xprintf(tls, ts /* "failed to open!!..." */, 0)
		sqlite3.Xsqlite3_close(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)))
		return uintptr(0)
	}
	var sql uintptr = ts + 18 /* "create table t(i..." */
	exit = sqlite3.Xsqlite3_exec(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)), sql, uintptr(0), uintptr(0), bp+32 /* &messaggeError */)
	if exit != 0 {
		libc.Xprintf(tls, ts+47 /* "failed to create..." */, libc.VaList(bp+8, *(*uintptr)(unsafe.Pointer(bp + 32 /* messaggeError */))))
		sqlite3.Xsqlite3_close(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)))
		return uintptr(0)
	}
	sql = ts + 77 /* "insert into t va..." */
	if sqlite3.Xsqlite3_prepare_v2(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)), sql, -1, bp+40 /* &stm */, uintptr(0)) != 0 {
		libc.Xprintf(tls, ts+101 /* "failed to prepar..." */, 0)
		sqlite3.Xsqlite3_close(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)))
		return uintptr(0)
	}
	var i int32
	for i = 0; i < n; i++ {
		if sqlite3.Xsqlite3_bind_int(tls, *(*uintptr)(unsafe.Pointer(bp + 40 /* stm */)), 1, i) != 0 {
			libc.Xprintf(tls, ts+132 /* "failed to bind v..." */, 0)
			sqlite3.Xsqlite3_close(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)))
			return uintptr(0)
		}
		if sqlite3.Xsqlite3_step(tls, *(*uintptr)(unsafe.Pointer(bp + 40 /* stm */))) != 101 {
			libc.Xprintf(tls, ts+156 /* "failed to create..." */, 0)
			sqlite3.Xsqlite3_close(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)))
			return uintptr(0)
		}
		sqlite3.Xsqlite3_reset(tls, *(*uintptr)(unsafe.Pointer(bp + 40 /* stm */)))
	}
	sqlite3.Xsqlite3_finalize(tls, *(*uintptr)(unsafe.Pointer(bp + 40 /* stm */)))
	sql = ts + 182 /* "commit" */
	exit = sqlite3.Xsqlite3_exec(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)), sql, uintptr(0), uintptr(0), bp+32 /* &messaggeError */)
	if exit != 0 {
		libc.Xprintf(tls, ts+189 /* "failed to commit..." */, libc.VaList(bp+16, *(*uintptr)(unsafe.Pointer(bp + 32 /* messaggeError */))))
		sqlite3.Xsqlite3_close(tls, *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */)))
		return uintptr(0)
	}
	return *(*uintptr)(unsafe.Pointer(bp + 24 /* DB */))
}
func xreading1native(tls *libc.TLS, DB uintptr, n int32) { /* bench.c:58:6: */
	bp := tls.Alloc(24)
	defer tls.Free(24)

	var exit int32 = 0
	_ = exit
	// var stm uintptr at bp+16, 8

	var sql uintptr = ts + 213 /* "select * from t" */
	if sqlite3.Xsqlite3_prepare_v2(tls, DB, sql, -1, bp+16 /* &stm */, uintptr(0)) != 0 {
		libc.Xprintf(tls, ts+229 /* "failed prepare s..." */, libc.VaList(bp, sqlite3.Xsqlite3_errmsg(tls, DB)))
		sqlite3.Xsqlite3_close(tls, DB)
		return
	}
	var i int32
	for i = 0; i < n; i++ {
		if sqlite3.Xsqlite3_step(tls, *(*uintptr)(unsafe.Pointer(bp + 16 /* stm */))) != 100 {
			libc.Xprintf(tls, ts+257 /* "failed to read f..." */, libc.VaList(bp+8, sqlite3.Xsqlite3_errmsg(tls, DB)))
			sqlite3.Xsqlite3_close(tls, DB)
			return
		}
		var res int32 = sqlite3.Xsqlite3_column_int(tls, *(*uintptr)(unsafe.Pointer(bp + 16 /* stm */)), 0)
		_ = res
	}
	sqlite3.Xsqlite3_finalize(tls, *(*uintptr)(unsafe.Pointer(bp + 16 /* stm */)))
	return
}

var ts1 = "failed to open!!\n\x00create table t(i int);begin;\x00failed to create table!!: %s\n\x00insert into t values(?)\x00failed to prepare inserting!!\n\x00failed to bind value!!\n\x00failed to create table!!\n\x00commit\x00failed to commit!!: %s\n\x00select * from t\x00failed prepare select!!:%s\n\x00failed to read from table!!:%s\n\x00"
var ts = (*reflect.StringHeader)(unsafe.Pointer(&ts1)).Data
